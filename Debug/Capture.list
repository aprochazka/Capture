
Capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f40  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000af4  080050cc  080050cc  000150cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bc0  08005bc0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005bc0  08005bc0  00015bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bc8  08005bc8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bc8  08005bc8  00015bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bcc  08005bcc  00015bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005bd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000070  08005c40  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08005c40  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012049  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002539  00000000  00000000  000320e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00034628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e18  00000000  00000000  00035520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000215b9  00000000  00000000  00036338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a77  00000000  00000000  000578f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4a1c  00000000  00000000  0006a368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012ed84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004034  00000000  00000000  0012edd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000070 	.word	0x20000070
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080050b4 	.word	0x080050b4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000074 	.word	0x20000074
 80001c8:	080050b4 	.word	0x080050b4

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <wCamReg>:
#include "main.h"



//edit single register
int wCamReg(I2C_HandleTypeDef hi2c1, uint16_t regID, uint16_t data){
 80004d0:	b084      	sub	sp, #16
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b084      	sub	sp, #16
 80004d6:	af02      	add	r7, sp, #8
 80004d8:	f107 0c10 	add.w	ip, r7, #16
 80004dc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_StatusTypeDef ret;
	uint8_t buf[5];
	uint8_t Addr = 0x78; //sccb (i2c) address of ov5642 shifted to 7bits (OV5642 doc page 119 and 113)
 80004e0:	2378      	movs	r3, #120	; 0x78
 80004e2:	71fb      	strb	r3, [r7, #7]
	buf[0] = regID >> 8; // we want to get just the first 8 bits of address
 80004e4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80004e8:	0a1b      	lsrs	r3, r3, #8
 80004ea:	b29b      	uxth	r3, r3
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	703b      	strb	r3, [r7, #0]
	buf[1] = regID; //rest of register address
 80004f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	707b      	strb	r3, [r7, #1]
	buf[2] = data;
 80004f8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	70bb      	strb	r3, [r7, #2]
	ret = HAL_I2C_Master_Transmit(&hi2c1, Addr, buf, 3, HAL_MAX_DELAY);
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	b299      	uxth	r1, r3
 8000504:	463a      	mov	r2, r7
 8000506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	2303      	movs	r3, #3
 800050e:	f107 0010 	add.w	r0, r7, #16
 8000512:	f001 fbd9 	bl	8001cc8 <HAL_I2C_Master_Transmit>
 8000516:	4603      	mov	r3, r0
 8000518:	71bb      	strb	r3, [r7, #6]
	if(ret == HAL_OK) return(1);
 800051a:	79bb      	ldrb	r3, [r7, #6]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d101      	bne.n	8000524 <wCamReg+0x54>
 8000520:	2301      	movs	r3, #1
 8000522:	e000      	b.n	8000526 <wCamReg+0x56>
	return(0);
 8000524:	2300      	movs	r3, #0
};
 8000526:	4618      	mov	r0, r3
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000530:	b004      	add	sp, #16
 8000532:	4770      	bx	lr

08000534 <wCamRegs>:

//cam library equivalent - int wrSensorRegs16_8(const struct sensor_reg reglist[])
// write data to multiple registers
int wCamRegs(I2C_HandleTypeDef hi2c1, const struct sensor_reg regList[])
{
 8000534:	b084      	sub	sp, #16
 8000536:	b580      	push	{r7, lr}
 8000538:	b098      	sub	sp, #96	; 0x60
 800053a:	af14      	add	r7, sp, #80	; 0x50
 800053c:	f107 0c18 	add.w	ip, r7, #24
 8000540:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	  int err = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]

	  uint16_t regID;
	  uint16_t regData;
	  const struct sensor_reg *nextReg = regList;
 8000548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800054a:	607b      	str	r3, [r7, #4]

	  while ((regID != 0xffff) | (regData != 0xff))
 800054c:	e019      	b.n	8000582 <wCamRegs+0x4e>
	  {
	    regID =nextReg->reg;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	817b      	strh	r3, [r7, #10]
	    regData = nextReg->val;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	885b      	ldrh	r3, [r3, #2]
 8000558:	813b      	strh	r3, [r7, #8]
	    err = wCamReg(hi2c1, regID, regData);
 800055a:	893b      	ldrh	r3, [r7, #8]
 800055c:	9312      	str	r3, [sp, #72]	; 0x48
 800055e:	897b      	ldrh	r3, [r7, #10]
 8000560:	9311      	str	r3, [sp, #68]	; 0x44
 8000562:	4668      	mov	r0, sp
 8000564:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000568:	2244      	movs	r2, #68	; 0x44
 800056a:	4619      	mov	r1, r3
 800056c:	f004 fcda 	bl	8004f24 <memcpy>
 8000570:	f107 0318 	add.w	r3, r7, #24
 8000574:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000576:	f7ff ffab 	bl	80004d0 <wCamReg>
 800057a:	60f8      	str	r0, [r7, #12]
	    nextReg++;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3304      	adds	r3, #4
 8000580:	607b      	str	r3, [r7, #4]
	  while ((regID != 0xffff) | (regData != 0xff))
 8000582:	897b      	ldrh	r3, [r7, #10]
 8000584:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000588:	4293      	cmp	r3, r2
 800058a:	bf14      	ite	ne
 800058c:	2301      	movne	r3, #1
 800058e:	2300      	moveq	r3, #0
 8000590:	b2da      	uxtb	r2, r3
 8000592:	893b      	ldrh	r3, [r7, #8]
 8000594:	2bff      	cmp	r3, #255	; 0xff
 8000596:	bf14      	ite	ne
 8000598:	2301      	movne	r3, #1
 800059a:	2300      	moveq	r3, #0
 800059c:	b2db      	uxtb	r3, r3
 800059e:	4313      	orrs	r3, r2
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d1d3      	bne.n	800054e <wCamRegs+0x1a>
	  }
	  return err;
 80005a6:	68fb      	ldr	r3, [r7, #12]
};
 80005a8:	4618      	mov	r0, r3
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005b2:	b004      	add	sp, #16
 80005b4:	4770      	bx	lr
	...

080005b8 <wCamRegSPI>:

//equivalent to library - bus_write();
int wCamRegSPI(SPI_HandleTypeDef hspi1, uint8_t addr, uint8_t data){
 80005b8:	b084      	sub	sp, #16
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b082      	sub	sp, #8
 80005be:	af00      	add	r7, sp, #0
 80005c0:	f107 0c10 	add.w	ip, r7, #16
 80005c4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_StatusTypeDef ret;
	uint8_t addrFormatted = addr | 0x80;
 80005c8:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80005cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2101      	movs	r1, #1
 80005d8:	4818      	ldr	r0, [pc, #96]	; (800063c <wCamRegSPI+0x84>)
 80005da:	f001 facd 	bl	8001b78 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005de:	2001      	movs	r0, #1
 80005e0:	f000 fec2 	bl	8001368 <HAL_Delay>

	//if these two transmits are rewritten to TransmitReceive() program HardFaults on return from this function
	ret = HAL_SPI_Transmit(&hspi1, (uint8_t *)&addrFormatted, 1, HAL_MAX_DELAY);
 80005e4:	1db9      	adds	r1, r7, #6
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ea:	2201      	movs	r2, #1
 80005ec:	f107 0010 	add.w	r0, r7, #16
 80005f0:	f003 f93b 	bl	800386a <HAL_SPI_Transmit>
 80005f4:	4603      	mov	r3, r0
 80005f6:	71fb      	strb	r3, [r7, #7]
	if(ret != HAL_OK){
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <wCamRegSPI+0x4a>
		return ret;
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	e014      	b.n	800062c <wCamRegSPI+0x74>
	}

	ret = HAL_SPI_Transmit(&hspi1, (uint8_t *)&data, 1, 100);
 8000602:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000606:	2364      	movs	r3, #100	; 0x64
 8000608:	2201      	movs	r2, #1
 800060a:	f107 0010 	add.w	r0, r7, #16
 800060e:	f003 f92c 	bl	800386a <HAL_SPI_Transmit>
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
	if(ret != HAL_OK){
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <wCamRegSPI+0x68>
		return ret;
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	e005      	b.n	800062c <wCamRegSPI+0x74>
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000620:	2201      	movs	r2, #1
 8000622:	2101      	movs	r1, #1
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <wCamRegSPI+0x84>)
 8000626:	f001 faa7 	bl	8001b78 <HAL_GPIO_WritePin>
	return 0;
 800062a:	2300      	movs	r3, #0

};
 800062c:	4618      	mov	r0, r3
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000636:	b004      	add	sp, #16
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	48000400 	.word	0x48000400

08000640 <rCamSPI>:

//read register
//library equivalent - uint8_t bus_read(int address)
uint8_t rCamSPI(SPI_HandleTypeDef hspi1, uint8_t addr){
 8000640:	b084      	sub	sp, #16
 8000642:	b580      	push	{r7, lr}
 8000644:	b084      	sub	sp, #16
 8000646:	af02      	add	r7, sp, #8
 8000648:	f107 0c10 	add.w	ip, r7, #16
 800064c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t addrMasked = addr & 0x7F;
 8000650:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8000654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000658:	b2db      	uxtb	r3, r3
 800065a:	71fb      	strb	r3, [r7, #7]
	uint8_t empty = 0x00;
 800065c:	2300      	movs	r3, #0
 800065e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2101      	movs	r1, #1
 8000664:	4811      	ldr	r0, [pc, #68]	; (80006ac <rCamSPI+0x6c>)
 8000666:	f001 fa87 	bl	8001b78 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &addrMasked, &ret, 1, HAL_MAX_DELAY);
 800066a:	1d7a      	adds	r2, r7, #5
 800066c:	1df9      	adds	r1, r7, #7
 800066e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	2301      	movs	r3, #1
 8000676:	f107 0010 	add.w	r0, r7, #16
 800067a:	f003 fb94 	bl	8003da6 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, &empty, &ret, 1, HAL_MAX_DELAY);
 800067e:	1d7a      	adds	r2, r7, #5
 8000680:	1db9      	adds	r1, r7, #6
 8000682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2301      	movs	r3, #1
 800068a:	f107 0010 	add.w	r0, r7, #16
 800068e:	f003 fb8a 	bl	8003da6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000692:	2201      	movs	r2, #1
 8000694:	2101      	movs	r1, #1
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <rCamSPI+0x6c>)
 8000698:	f001 fa6e 	bl	8001b78 <HAL_GPIO_WritePin>
	return ret;
 800069c:	797b      	ldrb	r3, [r7, #5]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006a8:	b004      	add	sp, #16
 80006aa:	4770      	bx	lr
 80006ac:	48000400 	.word	0x48000400

080006b0 <camInit>:

	return 1;
}

//Initialize camera by reverse engineering demo code for weaker chip on official github
void camInit(I2C_HandleTypeDef hi2c1, SPI_HandleTypeDef hspi1){
 80006b0:	b084      	sub	sp, #16
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b098      	sub	sp, #96	; 0x60
 80006b6:	af18      	add	r7, sp, #96	; 0x60
 80006b8:	f107 0c08 	add.w	ip, r7, #8
 80006bc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	wCamReg(hi2c1, 0x3008, 0x80); // RESET CHIP
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	9312      	str	r3, [sp, #72]	; 0x48
 80006c4:	f243 0308 	movw	r3, #12296	; 0x3008
 80006c8:	9311      	str	r3, [sp, #68]	; 0x44
 80006ca:	4668      	mov	r0, sp
 80006cc:	f107 0318 	add.w	r3, r7, #24
 80006d0:	2244      	movs	r2, #68	; 0x44
 80006d2:	4619      	mov	r1, r3
 80006d4:	f004 fc26 	bl	8004f24 <memcpy>
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006de:	f7ff fef7 	bl	80004d0 <wCamReg>
	wCamRegs(hi2c1, OV5642_QVGA_Preview);
 80006e2:	4b42      	ldr	r3, [pc, #264]	; (80007ec <camInit+0x13c>)
 80006e4:	9311      	str	r3, [sp, #68]	; 0x44
 80006e6:	4668      	mov	r0, sp
 80006e8:	f107 0318 	add.w	r3, r7, #24
 80006ec:	2244      	movs	r2, #68	; 0x44
 80006ee:	4619      	mov	r1, r3
 80006f0:	f004 fc18 	bl	8004f24 <memcpy>
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006fa:	f7ff ff1b 	bl	8000534 <wCamRegs>
	wCamRegs(hi2c1, OV5642_JPEG_Capture_QSXGA);
 80006fe:	4b3c      	ldr	r3, [pc, #240]	; (80007f0 <camInit+0x140>)
 8000700:	9311      	str	r3, [sp, #68]	; 0x44
 8000702:	4668      	mov	r0, sp
 8000704:	f107 0318 	add.w	r3, r7, #24
 8000708:	2244      	movs	r2, #68	; 0x44
 800070a:	4619      	mov	r1, r3
 800070c:	f004 fc0a 	bl	8004f24 <memcpy>
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000716:	f7ff ff0d 	bl	8000534 <wCamRegs>
	wCamRegs(hi2c1, ov5642_320x240);
 800071a:	4b36      	ldr	r3, [pc, #216]	; (80007f4 <camInit+0x144>)
 800071c:	9311      	str	r3, [sp, #68]	; 0x44
 800071e:	4668      	mov	r0, sp
 8000720:	f107 0318 	add.w	r3, r7, #24
 8000724:	2244      	movs	r2, #68	; 0x44
 8000726:	4619      	mov	r1, r3
 8000728:	f004 fbfc 	bl	8004f24 <memcpy>
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000732:	f7ff feff 	bl	8000534 <wCamRegs>
    wCamReg(hi2c1, 0x3818, 0xa8); //TIMING CONTROL - ENABLE COMPRESSION, THUMBNAIL MODE DISABLE, VERTICAL FLIP, MIRROR OFF
 8000736:	23a8      	movs	r3, #168	; 0xa8
 8000738:	9312      	str	r3, [sp, #72]	; 0x48
 800073a:	f643 0318 	movw	r3, #14360	; 0x3818
 800073e:	9311      	str	r3, [sp, #68]	; 0x44
 8000740:	4668      	mov	r0, sp
 8000742:	f107 0318 	add.w	r3, r7, #24
 8000746:	2244      	movs	r2, #68	; 0x44
 8000748:	4619      	mov	r1, r3
 800074a:	f004 fbeb 	bl	8004f24 <memcpy>
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000754:	f7ff febc 	bl	80004d0 <wCamReg>
    wCamReg(hi2c1, 0x3621, 0x10); //REGISTER FOR CORRECT MIRROR FUNCTION
 8000758:	2310      	movs	r3, #16
 800075a:	9312      	str	r3, [sp, #72]	; 0x48
 800075c:	f243 6321 	movw	r3, #13857	; 0x3621
 8000760:	9311      	str	r3, [sp, #68]	; 0x44
 8000762:	4668      	mov	r0, sp
 8000764:	f107 0318 	add.w	r3, r7, #24
 8000768:	2244      	movs	r2, #68	; 0x44
 800076a:	4619      	mov	r1, r3
 800076c:	f004 fbda 	bl	8004f24 <memcpy>
 8000770:	f107 0308 	add.w	r3, r7, #8
 8000774:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000776:	f7ff feab 	bl	80004d0 <wCamReg>
    wCamReg(hi2c1, 0x3801, 0xb0); //TIMING HORIZONTAL START - ALSO FOR MIRROR
 800077a:	23b0      	movs	r3, #176	; 0xb0
 800077c:	9312      	str	r3, [sp, #72]	; 0x48
 800077e:	f643 0301 	movw	r3, #14337	; 0x3801
 8000782:	9311      	str	r3, [sp, #68]	; 0x44
 8000784:	4668      	mov	r0, sp
 8000786:	f107 0318 	add.w	r3, r7, #24
 800078a:	2244      	movs	r2, #68	; 0x44
 800078c:	4619      	mov	r1, r3
 800078e:	f004 fbc9 	bl	8004f24 <memcpy>
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000798:	f7ff fe9a 	bl	80004d0 <wCamReg>
    wCamReg(hi2c1, 0x4407, 0x04); // COMPRESSION CONTROL
 800079c:	2304      	movs	r3, #4
 800079e:	9312      	str	r3, [sp, #72]	; 0x48
 80007a0:	f244 4307 	movw	r3, #17415	; 0x4407
 80007a4:	9311      	str	r3, [sp, #68]	; 0x44
 80007a6:	4668      	mov	r0, sp
 80007a8:	f107 0318 	add.w	r3, r7, #24
 80007ac:	2244      	movs	r2, #68	; 0x44
 80007ae:	4619      	mov	r1, r3
 80007b0:	f004 fbb8 	bl	8004f24 <memcpy>
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007ba:	f7ff fe89 	bl	80004d0 <wCamReg>
	wCamRegSPI(hspi1, 0x03, 0x02); // SET VSYNC POLARITY TO ACTIVE LOW
 80007be:	2302      	movs	r3, #2
 80007c0:	9316      	str	r3, [sp, #88]	; 0x58
 80007c2:	2303      	movs	r3, #3
 80007c4:	9315      	str	r3, [sp, #84]	; 0x54
 80007c6:	4668      	mov	r0, sp
 80007c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007cc:	2254      	movs	r2, #84	; 0x54
 80007ce:	4619      	mov	r1, r3
 80007d0:	f004 fba8 	bl	8004f24 <memcpy>
 80007d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80007d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007da:	f7ff feed 	bl	80005b8 <wCamRegSPI>
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007e6:	b004      	add	sp, #16
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	08005258 	.word	0x08005258
 80007f0:	080050cc 	.word	0x080050cc
 80007f4:	080051ec 	.word	0x080051ec

080007f8 <snapPic>:

//try to get any capture data back from camera module
void snapPic(I2C_HandleTypeDef hi2c1, UART_HandleTypeDef huart2, SPI_HandleTypeDef hspi1){
 80007f8:	b084      	sub	sp, #16
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b0a0      	sub	sp, #128	; 0x80
 80007fe:	af18      	add	r7, sp, #96	; 0x60
 8000800:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8000804:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

			//set number of frames to capture to 1
			wCamRegSPI(hspi1, 0x1, 0x1);
 8000808:	2301      	movs	r3, #1
 800080a:	9316      	str	r3, [sp, #88]	; 0x58
 800080c:	2301      	movs	r3, #1
 800080e:	9315      	str	r3, [sp, #84]	; 0x54
 8000810:	4668      	mov	r0, sp
 8000812:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000816:	2254      	movs	r2, #84	; 0x54
 8000818:	4619      	mov	r1, r3
 800081a:	f004 fb83 	bl	8004f24 <memcpy>
 800081e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000822:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000824:	f7ff fec8 	bl	80005b8 <wCamRegSPI>

			// test read number of frames to capture - working
			rCamSPI(hspi1, 0x1);
 8000828:	2301      	movs	r3, #1
 800082a:	9315      	str	r3, [sp, #84]	; 0x54
 800082c:	4668      	mov	r0, sp
 800082e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000832:	2254      	movs	r2, #84	; 0x54
 8000834:	4619      	mov	r1, r3
 8000836:	f004 fb75 	bl	8004f24 <memcpy>
 800083a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800083e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000840:	f7ff fefe 	bl	8000640 <rCamSPI>

			//reset flags
			wCamRegSPI(hspi1, 0x04, 0x31);
 8000844:	2331      	movs	r3, #49	; 0x31
 8000846:	9316      	str	r3, [sp, #88]	; 0x58
 8000848:	2304      	movs	r3, #4
 800084a:	9315      	str	r3, [sp, #84]	; 0x54
 800084c:	4668      	mov	r0, sp
 800084e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000852:	2254      	movs	r2, #84	; 0x54
 8000854:	4619      	mov	r1, r3
 8000856:	f004 fb65 	bl	8004f24 <memcpy>
 800085a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800085e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000860:	f7ff feaa 	bl	80005b8 <wCamRegSPI>
			wCamRegSPI(hspi1, 0x04, 0x31);
 8000864:	2331      	movs	r3, #49	; 0x31
 8000866:	9316      	str	r3, [sp, #88]	; 0x58
 8000868:	2304      	movs	r3, #4
 800086a:	9315      	str	r3, [sp, #84]	; 0x54
 800086c:	4668      	mov	r0, sp
 800086e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000872:	2254      	movs	r2, #84	; 0x54
 8000874:	4619      	mov	r1, r3
 8000876:	f004 fb55 	bl	8004f24 <memcpy>
 800087a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800087e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000880:	f7ff fe9a 	bl	80005b8 <wCamRegSPI>
			wCamRegSPI(hspi1, 0x04, 0x31);
 8000884:	2331      	movs	r3, #49	; 0x31
 8000886:	9316      	str	r3, [sp, #88]	; 0x58
 8000888:	2304      	movs	r3, #4
 800088a:	9315      	str	r3, [sp, #84]	; 0x54
 800088c:	4668      	mov	r0, sp
 800088e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000892:	2254      	movs	r2, #84	; 0x54
 8000894:	4619      	mov	r1, r3
 8000896:	f004 fb45 	bl	8004f24 <memcpy>
 800089a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800089e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008a0:	f7ff fe8a 	bl	80005b8 <wCamRegSPI>
			wCamRegSPI(hspi1, 0x04, 0x31);
 80008a4:	2331      	movs	r3, #49	; 0x31
 80008a6:	9316      	str	r3, [sp, #88]	; 0x58
 80008a8:	2304      	movs	r3, #4
 80008aa:	9315      	str	r3, [sp, #84]	; 0x54
 80008ac:	4668      	mov	r0, sp
 80008ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008b2:	2254      	movs	r2, #84	; 0x54
 80008b4:	4619      	mov	r1, r3
 80008b6:	f004 fb35 	bl	8004f24 <memcpy>
 80008ba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80008be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008c0:	f7ff fe7a 	bl	80005b8 <wCamRegSPI>

			// set cam to test mode
			//wCamRegSPI(hspi1, 0x05, 0x1);

			// start capture
			wCamRegSPI(hspi1, 0x04, 0x2);
 80008c4:	2302      	movs	r3, #2
 80008c6:	9316      	str	r3, [sp, #88]	; 0x58
 80008c8:	2304      	movs	r3, #4
 80008ca:	9315      	str	r3, [sp, #84]	; 0x54
 80008cc:	4668      	mov	r0, sp
 80008ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008d2:	2254      	movs	r2, #84	; 0x54
 80008d4:	4619      	mov	r1, r3
 80008d6:	f004 fb25 	bl	8004f24 <memcpy>
 80008da:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80008de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008e0:	f7ff fe6a 	bl	80005b8 <wCamRegSPI>

			//wait for capture done
			while(1){
				uint8_t regValue = rCamSPI(hspi1, 0x41);
 80008e4:	2341      	movs	r3, #65	; 0x41
 80008e6:	9315      	str	r3, [sp, #84]	; 0x54
 80008e8:	4668      	mov	r0, sp
 80008ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008ee:	2254      	movs	r2, #84	; 0x54
 80008f0:	4619      	mov	r1, r3
 80008f2:	f004 fb17 	bl	8004f24 <memcpy>
 80008f6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80008fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008fc:	f7ff fea0 	bl	8000640 <rCamSPI>
 8000900:	4603      	mov	r3, r0
 8000902:	77fb      	strb	r3, [r7, #31]
				uint8_t captureDoneMask = 0x8;
 8000904:	2308      	movs	r3, #8
 8000906:	77bb      	strb	r3, [r7, #30]
				if(regValue & captureDoneMask) break;
 8000908:	7ffa      	ldrb	r2, [r7, #31]
 800090a:	7fbb      	ldrb	r3, [r7, #30]
 800090c:	4013      	ands	r3, r2
 800090e:	b2db      	uxtb	r3, r3
 8000910:	2b00      	cmp	r3, #0
 8000912:	d100      	bne.n	8000916 <snapPic+0x11e>
			while(1){
 8000914:	e7e6      	b.n	80008e4 <snapPic+0xec>
				if(regValue & captureDoneMask) break;
 8000916:	bf00      	nop
			}

				uint32_t len1,len2,len3,len=0;
 8000918:	2300      	movs	r3, #0
 800091a:	61bb      	str	r3, [r7, #24]
			 	// FIFO_SIZE1,2,3 - 0x42, 43, 44
				//len1 = read_reg(FIFO_SIZE1);
  	  	  	  	len1 = rCamSPI(hspi1, 0x42);
 800091c:	2342      	movs	r3, #66	; 0x42
 800091e:	9315      	str	r3, [sp, #84]	; 0x54
 8000920:	4668      	mov	r0, sp
 8000922:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000926:	2254      	movs	r2, #84	; 0x54
 8000928:	4619      	mov	r1, r3
 800092a:	f004 fafb 	bl	8004f24 <memcpy>
 800092e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000932:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000934:	f7ff fe84 	bl	8000640 <rCamSPI>
 8000938:	4603      	mov	r3, r0
 800093a:	617b      	str	r3, [r7, #20]
  	  	  	  	len1 = rCamSPI(hspi1, 0x42);
 800093c:	2342      	movs	r3, #66	; 0x42
 800093e:	9315      	str	r3, [sp, #84]	; 0x54
 8000940:	4668      	mov	r0, sp
 8000942:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000946:	2254      	movs	r2, #84	; 0x54
 8000948:	4619      	mov	r1, r3
 800094a:	f004 faeb 	bl	8004f24 <memcpy>
 800094e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000952:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000954:	f7ff fe74 	bl	8000640 <rCamSPI>
 8000958:	4603      	mov	r3, r0
 800095a:	617b      	str	r3, [r7, #20]

			 	//len2 = read_reg(FIFO_SIZE2);
  	  	  	  	len2 = rCamSPI(hspi1, 0x43);
 800095c:	2343      	movs	r3, #67	; 0x43
 800095e:	9315      	str	r3, [sp, #84]	; 0x54
 8000960:	4668      	mov	r0, sp
 8000962:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000966:	2254      	movs	r2, #84	; 0x54
 8000968:	4619      	mov	r1, r3
 800096a:	f004 fadb 	bl	8004f24 <memcpy>
 800096e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000972:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000974:	f7ff fe64 	bl	8000640 <rCamSPI>
 8000978:	4603      	mov	r3, r0
 800097a:	613b      	str	r3, [r7, #16]

  	  	  	  	//len3 = read_reg(FIFO_SIZE3) & 0x7f;
  	  	  	  	len3 = rCamSPI(hspi1, 0x44) & 0x7f;
 800097c:	2344      	movs	r3, #68	; 0x44
 800097e:	9315      	str	r3, [sp, #84]	; 0x54
 8000980:	4668      	mov	r0, sp
 8000982:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000986:	2254      	movs	r2, #84	; 0x54
 8000988:	4619      	mov	r1, r3
 800098a:	f004 facb 	bl	8004f24 <memcpy>
 800098e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000992:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000994:	f7ff fe54 	bl	8000640 <rCamSPI>
 8000998:	4603      	mov	r3, r0
 800099a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800099e:	60fb      	str	r3, [r7, #12]

  	  	  	  	len = ((len3 << 16) | (len2 << 8) | len1) & 0x07fffff;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	041a      	lsls	r2, r3, #16
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	021b      	lsls	r3, r3, #8
 80009a8:	431a      	orrs	r2, r3
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80009b2:	61bb      	str	r3, [r7, #24]

			//sendlen = (length>=BUFFER_MAX_SIZE) ? BUFFER_MAX_SIZE : length;
			uint32_t sendLen = (len>=4096) ? 4096 : len;
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009ba:	bf28      	it	cs
 80009bc:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 80009c0:	60bb      	str	r3, [r7, #8]

			uint8_t * picbuf = malloc(40960 * sizeof(uint8_t));
 80009c2:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 80009c6:	f004 faa5 	bl	8004f14 <malloc>
 80009ca:	4603      	mov	r3, r0
 80009cc:	607b      	str	r3, [r7, #4]
			memset(picbuf, 0, 40960);
 80009ce:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80009d2:	2100      	movs	r1, #0
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f004 fab3 	bl	8004f40 <memset>

			//DMA1_RX(picbuf, sendlen);

				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2101      	movs	r1, #1
 80009de:	4818      	ldr	r0, [pc, #96]	; (8000a40 <snapPic+0x248>)
 80009e0:	f001 f8ca 	bl	8001b78 <HAL_GPIO_WritePin>

				uint8_t BURST_FIFO_READ = 0x3d;
 80009e4:	233d      	movs	r3, #61	; 0x3d
 80009e6:	70fb      	strb	r3, [r7, #3]

				HAL_SPI_TransmitReceive(&hspi1, &BURST_FIFO_READ, picbuf, 1, HAL_MAX_DELAY);
 80009e8:	1cf9      	adds	r1, r7, #3
 80009ea:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	2301      	movs	r3, #1
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	f003 f9d5 	bl	8003da6 <HAL_SPI_TransmitReceive>

				HAL_SPI_Receive(&hspi1, picbuf, sendLen, HAL_MAX_DELAY);
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8000a04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a08:	6879      	ldr	r1, [r7, #4]
 8000a0a:	f003 f89c 	bl	8003b46 <HAL_SPI_Receive>

				//while(hspi1.State != HAL_SPI_STATE_READY){;}
				HAL_Delay(1000); //delay to ensure full dma transmission
 8000a0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a12:	f000 fca9 	bl	8001368 <HAL_Delay>

				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	2101      	movs	r1, #1
 8000a1a:	4809      	ldr	r0, [pc, #36]	; (8000a40 <snapPic+0x248>)
 8000a1c:	f001 f8ac 	bl	8001b78 <HAL_GPIO_WritePin>

				//int bufLen = strlen((char*)picbuf);

				HAL_UART_Transmit(&huart2, picbuf, sendLen, HAL_MAX_DELAY);
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8000a28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a2c:	6879      	ldr	r1, [r7, #4]
 8000a2e:	f003 fdd7 	bl	80045e0 <HAL_UART_Transmit>
					10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
					20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d ff d9

					WHICH HAS CORRECT JPEG START AND END BYTES BUT IS FOR SOME REASON DUMMY DATA
				 */
		}
 8000a32:	bf00      	nop
 8000a34:	3720      	adds	r7, #32
 8000a36:	46bd      	mov	sp, r7
 8000a38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a3c:	b004      	add	sp, #16
 8000a3e:	4770      	bx	lr
 8000a40:	48000400 	.word	0x48000400

08000a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b0dd      	sub	sp, #372	; 0x174
 8000a48:	af4c      	add	r7, sp, #304	; 0x130
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4a:	f000 fc18 	bl	800127e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4e:	f000 f85d 	bl	8000b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a52:	f000 f991 	bl	8000d78 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a56:	f000 f969 	bl	8000d2c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a5a:	f000 f937 	bl	8000ccc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000a5e:	f000 f8b7 	bl	8000bd0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a62:	f000 f8f5 	bl	8000c50 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	2101      	movs	r1, #1
 8000a6a:	4824      	ldr	r0, [pc, #144]	; (8000afc <main+0xb8>)
 8000a6c:	f001 f884 	bl	8001b78 <HAL_GPIO_WritePin>

  //This spi transfer is just to initialize clock to low before first real transfer so logic analyzer won't display error
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2101      	movs	r1, #1
 8000a74:	4821      	ldr	r0, [pc, #132]	; (8000afc <main+0xb8>)
 8000a76:	f001 f87f 	bl	8001b78 <HAL_GPIO_WritePin>
  char spi_buff[64];
  HAL_SPI_Transmit(&hspi1, 0x00,1, HAL_MAX_DELAY);
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2100      	movs	r1, #0
 8000a82:	481f      	ldr	r0, [pc, #124]	; (8000b00 <main+0xbc>)
 8000a84:	f002 fef1 	bl	800386a <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, (uint8_t*)&spi_buff,1, HAL_MAX_DELAY);
 8000a88:	4639      	mov	r1, r7
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a8e:	2201      	movs	r2, #1
 8000a90:	481b      	ldr	r0, [pc, #108]	; (8000b00 <main+0xbc>)
 8000a92:	f003 f858 	bl	8003b46 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000a96:	2201      	movs	r2, #1
 8000a98:	2101      	movs	r1, #1
 8000a9a:	4818      	ldr	r0, [pc, #96]	; (8000afc <main+0xb8>)
 8000a9c:	f001 f86c 	bl	8001b78 <HAL_GPIO_WritePin>

  //Initialize module for simple low res single jpeg capture
  camInit(hi2c1, hspi1);
 8000aa0:	4c18      	ldr	r4, [pc, #96]	; (8000b04 <main+0xc0>)
 8000aa2:	4a17      	ldr	r2, [pc, #92]	; (8000b00 <main+0xbc>)
 8000aa4:	ab11      	add	r3, sp, #68	; 0x44
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	2264      	movs	r2, #100	; 0x64
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f004 fa3a 	bl	8004f24 <memcpy>
 8000ab0:	4668      	mov	r0, sp
 8000ab2:	f104 0310 	add.w	r3, r4, #16
 8000ab6:	2244      	movs	r2, #68	; 0x44
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f004 fa33 	bl	8004f24 <memcpy>
 8000abe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ac2:	f7ff fdf5 	bl	80006b0 <camInit>

  //Try to capture picture and send first 4096 bytes of picture data to uart
  snapPic(hi2c1, huart2, hspi1);
 8000ac6:	4c0f      	ldr	r4, [pc, #60]	; (8000b04 <main+0xc0>)
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <main+0xbc>)
 8000aca:	ab32      	add	r3, sp, #200	; 0xc8
 8000acc:	4611      	mov	r1, r2
 8000ace:	2264      	movs	r2, #100	; 0x64
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f004 fa27 	bl	8004f24 <memcpy>
 8000ad6:	4a0c      	ldr	r2, [pc, #48]	; (8000b08 <main+0xc4>)
 8000ad8:	ab11      	add	r3, sp, #68	; 0x44
 8000ada:	4611      	mov	r1, r2
 8000adc:	2284      	movs	r2, #132	; 0x84
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f004 fa20 	bl	8004f24 <memcpy>
 8000ae4:	4668      	mov	r0, sp
 8000ae6:	f104 0310 	add.w	r3, r4, #16
 8000aea:	2244      	movs	r2, #68	; 0x44
 8000aec:	4619      	mov	r1, r3
 8000aee:	f004 fa19 	bl	8004f24 <memcpy>
 8000af2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000af6:	f7ff fe7f 	bl	80007f8 <snapPic>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <main+0xb6>
 8000afc:	48000400 	.word	0x48000400
 8000b00:	200000e0 	.word	0x200000e0
 8000b04:	2000008c 	.word	0x2000008c
 8000b08:	200001d4 	.word	0x200001d4

08000b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b096      	sub	sp, #88	; 0x58
 8000b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	2244      	movs	r2, #68	; 0x44
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f004 fa10 	bl	8004f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b20:	463b      	mov	r3, r7
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b2e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b32:	f001 fc71 	bl	8002418 <HAL_PWREx_ControlVoltageScaling>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b3c:	f000 f966 	bl	8000e0c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b40:	f001 fc4c 	bl	80023dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b44:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <SystemClock_Config+0xc0>)
 8000b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b4a:	4a20      	ldr	r2, [pc, #128]	; (8000bcc <SystemClock_Config+0xc0>)
 8000b4c:	f023 0318 	bic.w	r3, r3, #24
 8000b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000b54:	2314      	movs	r3, #20
 8000b56:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b64:	2360      	movs	r3, #96	; 0x60
 8000b66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000b74:	2310      	movs	r3, #16
 8000b76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b78:	2307      	movs	r3, #7
 8000b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f001 fc9b 	bl	80024c4 <HAL_RCC_OscConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b94:	f000 f93a 	bl	8000e0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b98:	230f      	movs	r3, #15
 8000b9a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bac:	463b      	mov	r3, r7
 8000bae:	2101      	movs	r1, #1
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f002 f89b 	bl	8002cec <HAL_RCC_ClockConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000bbc:	f000 f926 	bl	8000e0c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000bc0:	f002 fcae 	bl	8003520 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000bc4:	bf00      	nop
 8000bc6:	3758      	adds	r7, #88	; 0x58
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <MX_I2C1_Init+0x74>)
 8000bd6:	4a1c      	ldr	r2, [pc, #112]	; (8000c48 <MX_I2C1_Init+0x78>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000bda:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <MX_I2C1_Init+0x74>)
 8000bdc:	4a1b      	ldr	r2, [pc, #108]	; (8000c4c <MX_I2C1_Init+0x7c>)
 8000bde:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <MX_I2C1_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <MX_I2C1_Init+0x74>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <MX_I2C1_Init+0x74>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_I2C1_Init+0x74>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <MX_I2C1_Init+0x74>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_I2C1_Init+0x74>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_I2C1_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c0a:	480e      	ldr	r0, [pc, #56]	; (8000c44 <MX_I2C1_Init+0x74>)
 8000c0c:	f000 ffcc 	bl	8001ba8 <HAL_I2C_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c16:	f000 f8f9 	bl	8000e0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4809      	ldr	r0, [pc, #36]	; (8000c44 <MX_I2C1_Init+0x74>)
 8000c1e:	f001 fb45 	bl	80022ac <HAL_I2CEx_ConfigAnalogFilter>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c28:	f000 f8f0 	bl	8000e0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_I2C1_Init+0x74>)
 8000c30:	f001 fb87 	bl	8002342 <HAL_I2CEx_ConfigDigitalFilter>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c3a:	f000 f8e7 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2000008c 	.word	0x2000008c
 8000c48:	40005400 	.word	0x40005400
 8000c4c:	00707cbb 	.word	0x00707cbb

08000c50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c54:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <MX_SPI1_Init+0x74>)
 8000c56:	4a1c      	ldr	r2, [pc, #112]	; (8000cc8 <MX_SPI1_Init+0x78>)
 8000c58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <MX_SPI1_Init+0x74>)
 8000c5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <MX_SPI1_Init+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c68:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <MX_SPI1_Init+0x74>)
 8000c6a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c6e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c70:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <MX_SPI1_Init+0x74>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c76:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <MX_SPI1_Init+0x74>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <MX_SPI1_Init+0x74>)
 8000c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c82:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <MX_SPI1_Init+0x74>)
 8000c86:	2228      	movs	r2, #40	; 0x28
 8000c88:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <MX_SPI1_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <MX_SPI1_Init+0x74>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <MX_SPI1_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <MX_SPI1_Init+0x74>)
 8000c9e:	2207      	movs	r2, #7
 8000ca0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <MX_SPI1_Init+0x74>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <MX_SPI1_Init+0x74>)
 8000caa:	2208      	movs	r2, #8
 8000cac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_SPI1_Init+0x74>)
 8000cb0:	f002 fd38 	bl	8003724 <HAL_SPI_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cba:	f000 f8a7 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200000e0 	.word	0x200000e0
 8000cc8:	40013000 	.word	0x40013000

08000ccc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000cd2:	4a15      	ldr	r2, [pc, #84]	; (8000d28 <MX_USART2_UART_Init+0x5c>)
 8000cd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000cd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_USART2_UART_Init+0x58>)
 8000d10:	f003 fc18 	bl	8004544 <HAL_UART_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d1a:	f000 f877 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200001d4 	.word	0x200001d4
 8000d28:	40004400 	.word	0x40004400

08000d2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <MX_DMA_Init+0x48>)
 8000d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d36:	4a0f      	ldr	r2, [pc, #60]	; (8000d74 <MX_DMA_Init+0x48>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6493      	str	r3, [r2, #72]	; 0x48
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <MX_DMA_Init+0x48>)
 8000d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	200c      	movs	r0, #12
 8000d50:	f000 fc09 	bl	8001566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000d54:	200c      	movs	r0, #12
 8000d56:	f000 fc22 	bl	800159e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	200d      	movs	r0, #13
 8000d60:	f000 fc01 	bl	8001566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d64:	200d      	movs	r0, #13
 8000d66:	f000 fc1a 	bl	800159e <HAL_NVIC_EnableIRQ>

}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40021000 	.word	0x40021000

08000d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <MX_GPIO_Init+0x8c>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	4a1c      	ldr	r2, [pc, #112]	; (8000e04 <MX_GPIO_Init+0x8c>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <MX_GPIO_Init+0x8c>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <MX_GPIO_Init+0x8c>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a16      	ldr	r2, [pc, #88]	; (8000e04 <MX_GPIO_Init+0x8c>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <MX_GPIO_Init+0x8c>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <MX_GPIO_Init+0x8c>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a10      	ldr	r2, [pc, #64]	; (8000e04 <MX_GPIO_Init+0x8c>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_GPIO_Init+0x8c>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2109      	movs	r1, #9
 8000dda:	480b      	ldr	r0, [pc, #44]	; (8000e08 <MX_GPIO_Init+0x90>)
 8000ddc:	f000 fecc 	bl	8001b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin;
 8000de0:	2309      	movs	r3, #9
 8000de2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	4619      	mov	r1, r3
 8000df6:	4804      	ldr	r0, [pc, #16]	; (8000e08 <MX_GPIO_Init+0x90>)
 8000df8:	f000 fd54 	bl	80018a4 <HAL_GPIO_Init>

}
 8000dfc:	bf00      	nop
 8000dfe:	3720      	adds	r7, #32
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40021000 	.word	0x40021000
 8000e08:	48000400 	.word	0x48000400

08000e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e10:	b672      	cpsid	i
}
 8000e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <Error_Handler+0x8>
	...

08000e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <HAL_MspInit+0x44>)
 8000e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e22:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <HAL_MspInit+0x44>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6613      	str	r3, [r2, #96]	; 0x60
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <HAL_MspInit+0x44>)
 8000e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_MspInit+0x44>)
 8000e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3a:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <HAL_MspInit+0x44>)
 8000e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e40:	6593      	str	r3, [r2, #88]	; 0x58
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_MspInit+0x44>)
 8000e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40021000 	.word	0x40021000

08000e60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b09e      	sub	sp, #120	; 0x78
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	2254      	movs	r2, #84	; 0x54
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f004 f85d 	bl	8004f40 <memset>
  if(hi2c->Instance==I2C1)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a1f      	ldr	r2, [pc, #124]	; (8000f08 <HAL_I2C_MspInit+0xa8>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d137      	bne.n	8000f00 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e90:	2340      	movs	r3, #64	; 0x40
 8000e92:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f002 f949 	bl	8003134 <HAL_RCCEx_PeriphCLKConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ea8:	f7ff ffb0 	bl	8000e0c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eac:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <HAL_I2C_MspInit+0xac>)
 8000eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb0:	4a16      	ldr	r2, [pc, #88]	; (8000f0c <HAL_I2C_MspInit+0xac>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <HAL_I2C_MspInit+0xac>)
 8000eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ec4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ec8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eca:	2312      	movs	r3, #18
 8000ecc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee4:	f000 fcde 	bl	80018a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <HAL_I2C_MspInit+0xac>)
 8000eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eec:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <HAL_I2C_MspInit+0xac>)
 8000eee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ef2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <HAL_I2C_MspInit+0xac>)
 8000ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f00:	bf00      	nop
 8000f02:	3778      	adds	r7, #120	; 0x78
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40005400 	.word	0x40005400
 8000f0c:	40021000 	.word	0x40021000

08000f10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a41      	ldr	r2, [pc, #260]	; (8001034 <HAL_SPI_MspInit+0x124>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d17c      	bne.n	800102c <HAL_SPI_MspInit+0x11c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f32:	4b41      	ldr	r3, [pc, #260]	; (8001038 <HAL_SPI_MspInit+0x128>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f36:	4a40      	ldr	r2, [pc, #256]	; (8001038 <HAL_SPI_MspInit+0x128>)
 8000f38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f3e:	4b3e      	ldr	r3, [pc, #248]	; (8001038 <HAL_SPI_MspInit+0x128>)
 8000f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	4b3b      	ldr	r3, [pc, #236]	; (8001038 <HAL_SPI_MspInit+0x128>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	4a3a      	ldr	r2, [pc, #232]	; (8001038 <HAL_SPI_MspInit+0x128>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f56:	4b38      	ldr	r3, [pc, #224]	; (8001038 <HAL_SPI_MspInit+0x128>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f62:	23e0      	movs	r3, #224	; 0xe0
 8000f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f72:	2305      	movs	r3, #5
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f80:	f000 fc90 	bl	80018a4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000f84:	4b2d      	ldr	r3, [pc, #180]	; (800103c <HAL_SPI_MspInit+0x12c>)
 8000f86:	4a2e      	ldr	r2, [pc, #184]	; (8001040 <HAL_SPI_MspInit+0x130>)
 8000f88:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8000f8a:	4b2c      	ldr	r3, [pc, #176]	; (800103c <HAL_SPI_MspInit+0x12c>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f90:	4b2a      	ldr	r3, [pc, #168]	; (800103c <HAL_SPI_MspInit+0x12c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f96:	4b29      	ldr	r3, [pc, #164]	; (800103c <HAL_SPI_MspInit+0x12c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f9c:	4b27      	ldr	r3, [pc, #156]	; (800103c <HAL_SPI_MspInit+0x12c>)
 8000f9e:	2280      	movs	r2, #128	; 0x80
 8000fa0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fa2:	4b26      	ldr	r3, [pc, #152]	; (800103c <HAL_SPI_MspInit+0x12c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fa8:	4b24      	ldr	r3, [pc, #144]	; (800103c <HAL_SPI_MspInit+0x12c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000fae:	4b23      	ldr	r3, [pc, #140]	; (800103c <HAL_SPI_MspInit+0x12c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000fb4:	4b21      	ldr	r3, [pc, #132]	; (800103c <HAL_SPI_MspInit+0x12c>)
 8000fb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000fbc:	481f      	ldr	r0, [pc, #124]	; (800103c <HAL_SPI_MspInit+0x12c>)
 8000fbe:	f000 fb09 	bl	80015d4 <HAL_DMA_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8000fc8:	f7ff ff20 	bl	8000e0c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a1b      	ldr	r2, [pc, #108]	; (800103c <HAL_SPI_MspInit+0x12c>)
 8000fd0:	659a      	str	r2, [r3, #88]	; 0x58
 8000fd2:	4a1a      	ldr	r2, [pc, #104]	; (800103c <HAL_SPI_MspInit+0x12c>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000fd8:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <HAL_SPI_MspInit+0x134>)
 8000fda:	4a1b      	ldr	r2, [pc, #108]	; (8001048 <HAL_SPI_MspInit+0x138>)
 8000fdc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <HAL_SPI_MspInit+0x134>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fe4:	4b17      	ldr	r3, [pc, #92]	; (8001044 <HAL_SPI_MspInit+0x134>)
 8000fe6:	2210      	movs	r2, #16
 8000fe8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fea:	4b16      	ldr	r3, [pc, #88]	; (8001044 <HAL_SPI_MspInit+0x134>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <HAL_SPI_MspInit+0x134>)
 8000ff2:	2280      	movs	r2, #128	; 0x80
 8000ff4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <HAL_SPI_MspInit+0x134>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <HAL_SPI_MspInit+0x134>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <HAL_SPI_MspInit+0x134>)
 8001004:	2200      	movs	r2, #0
 8001006:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001008:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <HAL_SPI_MspInit+0x134>)
 800100a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800100e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001010:	480c      	ldr	r0, [pc, #48]	; (8001044 <HAL_SPI_MspInit+0x134>)
 8001012:	f000 fadf 	bl	80015d4 <HAL_DMA_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 800101c:	f7ff fef6 	bl	8000e0c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a08      	ldr	r2, [pc, #32]	; (8001044 <HAL_SPI_MspInit+0x134>)
 8001024:	655a      	str	r2, [r3, #84]	; 0x54
 8001026:	4a07      	ldr	r2, [pc, #28]	; (8001044 <HAL_SPI_MspInit+0x134>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800102c:	bf00      	nop
 800102e:	3728      	adds	r7, #40	; 0x28
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40013000 	.word	0x40013000
 8001038:	40021000 	.word	0x40021000
 800103c:	20000144 	.word	0x20000144
 8001040:	4002001c 	.word	0x4002001c
 8001044:	2000018c 	.word	0x2000018c
 8001048:	40020030 	.word	0x40020030

0800104c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b09e      	sub	sp, #120	; 0x78
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	2254      	movs	r2, #84	; 0x54
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f003 ff67 	bl	8004f40 <memset>
  if(huart->Instance==USART2)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a28      	ldr	r2, [pc, #160]	; (8001118 <HAL_UART_MspInit+0xcc>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d148      	bne.n	800110e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800107c:	2302      	movs	r3, #2
 800107e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001080:	2300      	movs	r3, #0
 8001082:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	4618      	mov	r0, r3
 800108a:	f002 f853 	bl	8003134 <HAL_RCCEx_PeriphCLKConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001094:	f7ff feba 	bl	8000e0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001098:	4b20      	ldr	r3, [pc, #128]	; (800111c <HAL_UART_MspInit+0xd0>)
 800109a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109c:	4a1f      	ldr	r2, [pc, #124]	; (800111c <HAL_UART_MspInit+0xd0>)
 800109e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a2:	6593      	str	r3, [r2, #88]	; 0x58
 80010a4:	4b1d      	ldr	r3, [pc, #116]	; (800111c <HAL_UART_MspInit+0xd0>)
 80010a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <HAL_UART_MspInit+0xd0>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b4:	4a19      	ldr	r2, [pc, #100]	; (800111c <HAL_UART_MspInit+0xd0>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010bc:	4b17      	ldr	r3, [pc, #92]	; (800111c <HAL_UART_MspInit+0xd0>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80010c8:	2304      	movs	r3, #4
 80010ca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010d8:	2307      	movs	r3, #7
 80010da:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010e0:	4619      	mov	r1, r3
 80010e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e6:	f000 fbdd 	bl	80018a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80010ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010ee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f8:	2303      	movs	r3, #3
 80010fa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80010fc:	2303      	movs	r3, #3
 80010fe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001100:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001104:	4619      	mov	r1, r3
 8001106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110a:	f000 fbcb 	bl	80018a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800110e:	bf00      	nop
 8001110:	3778      	adds	r7, #120	; 0x78
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40004400 	.word	0x40004400
 800111c:	40021000 	.word	0x40021000

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <NMI_Handler+0x4>

08001126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <HardFault_Handler+0x4>

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <MemManage_Handler+0x4>

08001132 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <BusFault_Handler+0x4>

08001138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <UsageFault_Handler+0x4>

0800113e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116c:	f000 f8dc 	bl	8001328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}

08001174 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <DMA1_Channel2_IRQHandler+0x10>)
 800117a:	f000 fae3 	bl	8001744 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000144 	.word	0x20000144

08001188 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <DMA1_Channel3_IRQHandler+0x10>)
 800118e:	f000 fad9 	bl	8001744 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000018c 	.word	0x2000018c

0800119c <_sbrk>:
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	4a14      	ldr	r2, [pc, #80]	; (80011f8 <_sbrk+0x5c>)
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <_sbrk+0x60>)
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d102      	bne.n	80011be <_sbrk+0x22>
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <_sbrk+0x64>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <_sbrk+0x68>)
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d207      	bcs.n	80011dc <_sbrk+0x40>
 80011cc:	f003 fe78 	bl	8004ec0 <__errno>
 80011d0:	4603      	mov	r3, r0
 80011d2:	220c      	movs	r2, #12
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011da:	e009      	b.n	80011f0 <_sbrk+0x54>
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <_sbrk+0x64>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <_sbrk+0x64>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	4a05      	ldr	r2, [pc, #20]	; (8001200 <_sbrk+0x64>)
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4618      	mov	r0, r3
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20010000 	.word	0x20010000
 80011fc:	00000400 	.word	0x00000400
 8001200:	20000258 	.word	0x20000258
 8001204:	20000270 	.word	0x20000270

08001208 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <SystemInit+0x20>)
 800120e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <SystemInit+0x20>)
 8001214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <Reset_Handler>:
 800122c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001264 <LoopForever+0x2>
 8001230:	f7ff ffea 	bl	8001208 <SystemInit>
 8001234:	480c      	ldr	r0, [pc, #48]	; (8001268 <LoopForever+0x6>)
 8001236:	490d      	ldr	r1, [pc, #52]	; (800126c <LoopForever+0xa>)
 8001238:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <LoopForever+0xe>)
 800123a:	2300      	movs	r3, #0
 800123c:	e002      	b.n	8001244 <LoopCopyDataInit>

0800123e <CopyDataInit>:
 800123e:	58d4      	ldr	r4, [r2, r3]
 8001240:	50c4      	str	r4, [r0, r3]
 8001242:	3304      	adds	r3, #4

08001244 <LoopCopyDataInit>:
 8001244:	18c4      	adds	r4, r0, r3
 8001246:	428c      	cmp	r4, r1
 8001248:	d3f9      	bcc.n	800123e <CopyDataInit>
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <LoopForever+0x12>)
 800124c:	4c0a      	ldr	r4, [pc, #40]	; (8001278 <LoopForever+0x16>)
 800124e:	2300      	movs	r3, #0
 8001250:	e001      	b.n	8001256 <LoopFillZerobss>

08001252 <FillZerobss>:
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	3204      	adds	r2, #4

08001256 <LoopFillZerobss>:
 8001256:	42a2      	cmp	r2, r4
 8001258:	d3fb      	bcc.n	8001252 <FillZerobss>
 800125a:	f003 fe37 	bl	8004ecc <__libc_init_array>
 800125e:	f7ff fbf1 	bl	8000a44 <main>

08001262 <LoopForever>:
 8001262:	e7fe      	b.n	8001262 <LoopForever>
 8001264:	20010000 	.word	0x20010000
 8001268:	20000000 	.word	0x20000000
 800126c:	20000070 	.word	0x20000070
 8001270:	08005bd0 	.word	0x08005bd0
 8001274:	20000070 	.word	0x20000070
 8001278:	20000270 	.word	0x20000270

0800127c <ADC1_IRQHandler>:
 800127c:	e7fe      	b.n	800127c <ADC1_IRQHandler>

0800127e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001284:	2300      	movs	r3, #0
 8001286:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001288:	2003      	movs	r0, #3
 800128a:	f000 f961 	bl	8001550 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800128e:	2000      	movs	r0, #0
 8001290:	f000 f80e 	bl	80012b0 <HAL_InitTick>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d002      	beq.n	80012a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	71fb      	strb	r3, [r7, #7]
 800129e:	e001      	b.n	80012a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012a0:	f7ff fdba 	bl	8000e18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012a4:	79fb      	ldrb	r3, [r7, #7]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012b8:	2300      	movs	r3, #0
 80012ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012bc:	4b17      	ldr	r3, [pc, #92]	; (800131c <HAL_InitTick+0x6c>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d023      	beq.n	800130c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012c4:	4b16      	ldr	r3, [pc, #88]	; (8001320 <HAL_InitTick+0x70>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <HAL_InitTick+0x6c>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 f96d 	bl	80015ba <HAL_SYSTICK_Config>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10f      	bne.n	8001306 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b0f      	cmp	r3, #15
 80012ea:	d809      	bhi.n	8001300 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ec:	2200      	movs	r2, #0
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012f4:	f000 f937 	bl	8001566 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012f8:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <HAL_InitTick+0x74>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	e007      	b.n	8001310 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	73fb      	strb	r3, [r7, #15]
 8001304:	e004      	b.n	8001310 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	73fb      	strb	r3, [r7, #15]
 800130a:	e001      	b.n	8001310 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001310:	7bfb      	ldrb	r3, [r7, #15]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000008 	.word	0x20000008
 8001320:	20000000 	.word	0x20000000
 8001324:	20000004 	.word	0x20000004

08001328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_IncTick+0x20>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_IncTick+0x24>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4413      	add	r3, r2
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <HAL_IncTick+0x24>)
 800133a:	6013      	str	r3, [r2, #0]
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000008 	.word	0x20000008
 800134c:	2000025c 	.word	0x2000025c

08001350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return uwTick;
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_GetTick+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	2000025c 	.word	0x2000025c

08001368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001370:	f7ff ffee 	bl	8001350 <HAL_GetTick>
 8001374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001380:	d005      	beq.n	800138e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_Delay+0x44>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	461a      	mov	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4413      	add	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800138e:	bf00      	nop
 8001390:	f7ff ffde 	bl	8001350 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	429a      	cmp	r2, r3
 800139e:	d8f7      	bhi.n	8001390 <HAL_Delay+0x28>
  {
  }
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000008 	.word	0x20000008

080013b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <__NVIC_SetPriorityGrouping+0x44>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013cc:	4013      	ands	r3, r2
 80013ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e2:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <__NVIC_SetPriorityGrouping+0x44>)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	60d3      	str	r3, [r2, #12]
}
 80013e8:	bf00      	nop
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <__NVIC_GetPriorityGrouping+0x18>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	f003 0307 	and.w	r3, r3, #7
}
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	2b00      	cmp	r3, #0
 8001424:	db0b      	blt.n	800143e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	f003 021f 	and.w	r2, r3, #31
 800142c:	4907      	ldr	r1, [pc, #28]	; (800144c <__NVIC_EnableIRQ+0x38>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	095b      	lsrs	r3, r3, #5
 8001434:	2001      	movs	r0, #1
 8001436:	fa00 f202 	lsl.w	r2, r0, r2
 800143a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000e100 	.word	0xe000e100

08001450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	db0a      	blt.n	800147a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	490c      	ldr	r1, [pc, #48]	; (800149c <__NVIC_SetPriority+0x4c>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	0112      	lsls	r2, r2, #4
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	440b      	add	r3, r1
 8001474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001478:	e00a      	b.n	8001490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4908      	ldr	r1, [pc, #32]	; (80014a0 <__NVIC_SetPriority+0x50>)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	3b04      	subs	r3, #4
 8001488:	0112      	lsls	r2, r2, #4
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	440b      	add	r3, r1
 800148e:	761a      	strb	r2, [r3, #24]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000e100 	.word	0xe000e100
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f1c3 0307 	rsb	r3, r3, #7
 80014be:	2b04      	cmp	r3, #4
 80014c0:	bf28      	it	cs
 80014c2:	2304      	movcs	r3, #4
 80014c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3304      	adds	r3, #4
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d902      	bls.n	80014d4 <NVIC_EncodePriority+0x30>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3b03      	subs	r3, #3
 80014d2:	e000      	b.n	80014d6 <NVIC_EncodePriority+0x32>
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	43d9      	mvns	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	4313      	orrs	r3, r2
         );
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800151c:	d301      	bcc.n	8001522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151e:	2301      	movs	r3, #1
 8001520:	e00f      	b.n	8001542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <SysTick_Config+0x40>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152a:	210f      	movs	r1, #15
 800152c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001530:	f7ff ff8e 	bl	8001450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <SysTick_Config+0x40>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <SysTick_Config+0x40>)
 800153c:	2207      	movs	r2, #7
 800153e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	e000e010 	.word	0xe000e010

08001550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ff29 	bl	80013b0 <__NVIC_SetPriorityGrouping>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001578:	f7ff ff3e 	bl	80013f8 <__NVIC_GetPriorityGrouping>
 800157c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	6978      	ldr	r0, [r7, #20]
 8001584:	f7ff ff8e 	bl	80014a4 <NVIC_EncodePriority>
 8001588:	4602      	mov	r2, r0
 800158a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff5d 	bl	8001450 <__NVIC_SetPriority>
}
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff31 	bl	8001414 <__NVIC_EnableIRQ>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ffa2 	bl	800150c <SysTick_Config>
 80015c8:	4603      	mov	r3, r0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e098      	b.n	8001718 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b4d      	ldr	r3, [pc, #308]	; (8001724 <HAL_DMA_Init+0x150>)
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d80f      	bhi.n	8001612 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b4b      	ldr	r3, [pc, #300]	; (8001728 <HAL_DMA_Init+0x154>)
 80015fa:	4413      	add	r3, r2
 80015fc:	4a4b      	ldr	r2, [pc, #300]	; (800172c <HAL_DMA_Init+0x158>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	009a      	lsls	r2, r3, #2
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_DMA_Init+0x15c>)
 800160e:	641a      	str	r2, [r3, #64]	; 0x40
 8001610:	e00e      	b.n	8001630 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	4b46      	ldr	r3, [pc, #280]	; (8001734 <HAL_DMA_Init+0x160>)
 800161a:	4413      	add	r3, r2
 800161c:	4a43      	ldr	r2, [pc, #268]	; (800172c <HAL_DMA_Init+0x158>)
 800161e:	fba2 2303 	umull	r2, r3, r2, r3
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	009a      	lsls	r2, r3, #2
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a42      	ldr	r2, [pc, #264]	; (8001738 <HAL_DMA_Init+0x164>)
 800162e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2202      	movs	r2, #2
 8001634:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800164a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001654:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001660:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800166c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	4313      	orrs	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800168a:	d039      	beq.n	8001700 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	4a27      	ldr	r2, [pc, #156]	; (8001730 <HAL_DMA_Init+0x15c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d11a      	bne.n	80016cc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001696:	4b29      	ldr	r3, [pc, #164]	; (800173c <HAL_DMA_Init+0x168>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	f003 031c 	and.w	r3, r3, #28
 80016a2:	210f      	movs	r1, #15
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	4924      	ldr	r1, [pc, #144]	; (800173c <HAL_DMA_Init+0x168>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80016b0:	4b22      	ldr	r3, [pc, #136]	; (800173c <HAL_DMA_Init+0x168>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6859      	ldr	r1, [r3, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016bc:	f003 031c 	and.w	r3, r3, #28
 80016c0:	fa01 f303 	lsl.w	r3, r1, r3
 80016c4:	491d      	ldr	r1, [pc, #116]	; (800173c <HAL_DMA_Init+0x168>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]
 80016ca:	e019      	b.n	8001700 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80016cc:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <HAL_DMA_Init+0x16c>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d4:	f003 031c 	and.w	r3, r3, #28
 80016d8:	210f      	movs	r1, #15
 80016da:	fa01 f303 	lsl.w	r3, r1, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	4917      	ldr	r1, [pc, #92]	; (8001740 <HAL_DMA_Init+0x16c>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80016e6:	4b16      	ldr	r3, [pc, #88]	; (8001740 <HAL_DMA_Init+0x16c>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6859      	ldr	r1, [r3, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	f003 031c 	and.w	r3, r3, #28
 80016f6:	fa01 f303 	lsl.w	r3, r1, r3
 80016fa:	4911      	ldr	r1, [pc, #68]	; (8001740 <HAL_DMA_Init+0x16c>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	40020407 	.word	0x40020407
 8001728:	bffdfff8 	.word	0xbffdfff8
 800172c:	cccccccd 	.word	0xcccccccd
 8001730:	40020000 	.word	0x40020000
 8001734:	bffdfbf8 	.word	0xbffdfbf8
 8001738:	40020400 	.word	0x40020400
 800173c:	400200a8 	.word	0x400200a8
 8001740:	400204a8 	.word	0x400204a8

08001744 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001760:	f003 031c 	and.w	r3, r3, #28
 8001764:	2204      	movs	r2, #4
 8001766:	409a      	lsls	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4013      	ands	r3, r2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d026      	beq.n	80017be <HAL_DMA_IRQHandler+0x7a>
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	2b00      	cmp	r3, #0
 8001778:	d021      	beq.n	80017be <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0320 	and.w	r3, r3, #32
 8001784:	2b00      	cmp	r3, #0
 8001786:	d107      	bne.n	8001798 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0204 	bic.w	r2, r2, #4
 8001796:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179c:	f003 021c 	and.w	r2, r3, #28
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	2104      	movs	r1, #4
 80017a6:	fa01 f202 	lsl.w	r2, r1, r2
 80017aa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d071      	beq.n	8001898 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80017bc:	e06c      	b.n	8001898 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	f003 031c 	and.w	r3, r3, #28
 80017c6:	2202      	movs	r2, #2
 80017c8:	409a      	lsls	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4013      	ands	r3, r2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d02e      	beq.n	8001830 <HAL_DMA_IRQHandler+0xec>
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d029      	beq.n	8001830 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0320 	and.w	r3, r3, #32
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10b      	bne.n	8001802 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 020a 	bic.w	r2, r2, #10
 80017f8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	f003 021c 	and.w	r2, r3, #28
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	2102      	movs	r1, #2
 8001810:	fa01 f202 	lsl.w	r2, r1, r2
 8001814:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001822:	2b00      	cmp	r3, #0
 8001824:	d038      	beq.n	8001898 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800182e:	e033      	b.n	8001898 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001834:	f003 031c 	and.w	r3, r3, #28
 8001838:	2208      	movs	r2, #8
 800183a:	409a      	lsls	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4013      	ands	r3, r2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d02a      	beq.n	800189a <HAL_DMA_IRQHandler+0x156>
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	2b00      	cmp	r3, #0
 800184c:	d025      	beq.n	800189a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 020e 	bic.w	r2, r2, #14
 800185c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	f003 021c 	and.w	r2, r3, #28
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	2101      	movs	r1, #1
 800186c:	fa01 f202 	lsl.w	r2, r1, r2
 8001870:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188c:	2b00      	cmp	r3, #0
 800188e:	d004      	beq.n	800189a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001898:	bf00      	nop
 800189a:	bf00      	nop
}
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b2:	e148      	b.n	8001b46 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	2101      	movs	r1, #1
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	fa01 f303 	lsl.w	r3, r1, r3
 80018c0:	4013      	ands	r3, r2
 80018c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 813a 	beq.w	8001b40 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d005      	beq.n	80018e4 <HAL_GPIO_Init+0x40>
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d130      	bne.n	8001946 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	68da      	ldr	r2, [r3, #12]
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4313      	orrs	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800191a:	2201      	movs	r2, #1
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	091b      	lsrs	r3, r3, #4
 8001930:	f003 0201 	and.w	r2, r3, #1
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	2b03      	cmp	r3, #3
 8001950:	d017      	beq.n	8001982 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	2203      	movs	r2, #3
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d123      	bne.n	80019d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	08da      	lsrs	r2, r3, #3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3208      	adds	r2, #8
 8001996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800199a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	220f      	movs	r2, #15
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	691a      	ldr	r2, [r3, #16]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	08da      	lsrs	r2, r3, #3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3208      	adds	r2, #8
 80019d0:	6939      	ldr	r1, [r7, #16]
 80019d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	2203      	movs	r2, #3
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 0203 	and.w	r2, r3, #3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 8094 	beq.w	8001b40 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a18:	4b52      	ldr	r3, [pc, #328]	; (8001b64 <HAL_GPIO_Init+0x2c0>)
 8001a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1c:	4a51      	ldr	r2, [pc, #324]	; (8001b64 <HAL_GPIO_Init+0x2c0>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6613      	str	r3, [r2, #96]	; 0x60
 8001a24:	4b4f      	ldr	r3, [pc, #316]	; (8001b64 <HAL_GPIO_Init+0x2c0>)
 8001a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a30:	4a4d      	ldr	r2, [pc, #308]	; (8001b68 <HAL_GPIO_Init+0x2c4>)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	089b      	lsrs	r3, r3, #2
 8001a36:	3302      	adds	r3, #2
 8001a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	220f      	movs	r2, #15
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a5a:	d00d      	beq.n	8001a78 <HAL_GPIO_Init+0x1d4>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a43      	ldr	r2, [pc, #268]	; (8001b6c <HAL_GPIO_Init+0x2c8>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d007      	beq.n	8001a74 <HAL_GPIO_Init+0x1d0>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a42      	ldr	r2, [pc, #264]	; (8001b70 <HAL_GPIO_Init+0x2cc>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d101      	bne.n	8001a70 <HAL_GPIO_Init+0x1cc>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	e004      	b.n	8001a7a <HAL_GPIO_Init+0x1d6>
 8001a70:	2307      	movs	r3, #7
 8001a72:	e002      	b.n	8001a7a <HAL_GPIO_Init+0x1d6>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <HAL_GPIO_Init+0x1d6>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	f002 0203 	and.w	r2, r2, #3
 8001a80:	0092      	lsls	r2, r2, #2
 8001a82:	4093      	lsls	r3, r2
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a8a:	4937      	ldr	r1, [pc, #220]	; (8001b68 <HAL_GPIO_Init+0x2c4>)
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	3302      	adds	r3, #2
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a98:	4b36      	ldr	r3, [pc, #216]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001abc:	4a2d      	ldr	r2, [pc, #180]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ac2:	4b2c      	ldr	r3, [pc, #176]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ae6:	4a23      	ldr	r2, [pc, #140]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001aec:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b10:	4a18      	ldr	r2, [pc, #96]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b3a:	4a0e      	ldr	r2, [pc, #56]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3301      	adds	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f47f aeaf 	bne.w	80018b4 <HAL_GPIO_Init+0x10>
  }
}
 8001b56:	bf00      	nop
 8001b58:	bf00      	nop
 8001b5a:	371c      	adds	r7, #28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40010000 	.word	0x40010000
 8001b6c:	48000400 	.word	0x48000400
 8001b70:	48000800 	.word	0x48000800
 8001b74:	40010400 	.word	0x40010400

08001b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	807b      	strh	r3, [r7, #2]
 8001b84:	4613      	mov	r3, r2
 8001b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b88:	787b      	ldrb	r3, [r7, #1]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b8e:	887a      	ldrh	r2, [r7, #2]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b94:	e002      	b.n	8001b9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b96:	887a      	ldrh	r2, [r7, #2]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e081      	b.n	8001cbe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d106      	bne.n	8001bd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff f946 	bl	8000e60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2224      	movs	r2, #36	; 0x24
 8001bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0201 	bic.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bf8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d107      	bne.n	8001c22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	e006      	b.n	8001c30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d104      	bne.n	8001c42 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	691a      	ldr	r2, [r3, #16]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69d9      	ldr	r1, [r3, #28]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a1a      	ldr	r2, [r3, #32]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2220      	movs	r2, #32
 8001caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af02      	add	r7, sp, #8
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	607a      	str	r2, [r7, #4]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	817b      	strh	r3, [r7, #10]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b20      	cmp	r3, #32
 8001ce6:	f040 80da 	bne.w	8001e9e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_I2C_Master_Transmit+0x30>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e0d3      	b.n	8001ea0 <HAL_I2C_Master_Transmit+0x1d8>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d00:	f7ff fb26 	bl	8001350 <HAL_GetTick>
 8001d04:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	2319      	movs	r3, #25
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 f8f0 	bl	8001ef8 <I2C_WaitOnFlagUntilTimeout>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e0be      	b.n	8001ea0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2221      	movs	r2, #33	; 0x21
 8001d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2210      	movs	r2, #16
 8001d2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	893a      	ldrh	r2, [r7, #8]
 8001d42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	2bff      	cmp	r3, #255	; 0xff
 8001d52:	d90e      	bls.n	8001d72 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	22ff      	movs	r2, #255	; 0xff
 8001d58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	8979      	ldrh	r1, [r7, #10]
 8001d62:	4b51      	ldr	r3, [pc, #324]	; (8001ea8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 fa6c 	bl	8002248 <I2C_TransferConfig>
 8001d70:	e06c      	b.n	8001e4c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	8979      	ldrh	r1, [r7, #10]
 8001d84:	4b48      	ldr	r3, [pc, #288]	; (8001ea8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 fa5b 	bl	8002248 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001d92:	e05b      	b.n	8001e4c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	6a39      	ldr	r1, [r7, #32]
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f000 f8ed 	bl	8001f78 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e07b      	b.n	8001ea0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	781a      	ldrb	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d034      	beq.n	8001e4c <HAL_I2C_Master_Transmit+0x184>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d130      	bne.n	8001e4c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	2200      	movs	r2, #0
 8001df2:	2180      	movs	r1, #128	; 0x80
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 f87f 	bl	8001ef8 <I2C_WaitOnFlagUntilTimeout>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e04d      	b.n	8001ea0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	2bff      	cmp	r3, #255	; 0xff
 8001e0c:	d90e      	bls.n	8001e2c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	22ff      	movs	r2, #255	; 0xff
 8001e12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	8979      	ldrh	r1, [r7, #10]
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f000 fa0f 	bl	8002248 <I2C_TransferConfig>
 8001e2a:	e00f      	b.n	8001e4c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	8979      	ldrh	r1, [r7, #10]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 f9fe 	bl	8002248 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d19e      	bne.n	8001d94 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	6a39      	ldr	r1, [r7, #32]
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 f8cc 	bl	8001ff8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e01a      	b.n	8001ea0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2220      	movs	r2, #32
 8001e70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6859      	ldr	r1, [r3, #4]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_I2C_Master_Transmit+0x1e4>)
 8001e7e:	400b      	ands	r3, r1
 8001e80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2220      	movs	r2, #32
 8001e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	e000      	b.n	8001ea0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001e9e:	2302      	movs	r3, #2
  }
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	80002000 	.word	0x80002000
 8001eac:	fe00e800 	.word	0xfe00e800

08001eb0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d103      	bne.n	8001ece <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d007      	beq.n	8001eec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699a      	ldr	r2, [r3, #24]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	619a      	str	r2, [r3, #24]
  }
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	4613      	mov	r3, r2
 8001f06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f08:	e022      	b.n	8001f50 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f10:	d01e      	beq.n	8001f50 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f12:	f7ff fa1d 	bl	8001350 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d302      	bcc.n	8001f28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d113      	bne.n	8001f50 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2c:	f043 0220 	orr.w	r2, r3, #32
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2220      	movs	r2, #32
 8001f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e00f      	b.n	8001f70 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699a      	ldr	r2, [r3, #24]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	bf0c      	ite	eq
 8001f60:	2301      	moveq	r3, #1
 8001f62:	2300      	movne	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	461a      	mov	r2, r3
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d0cd      	beq.n	8001f0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f84:	e02c      	b.n	8001fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 f870 	bl	8002070 <I2C_IsErrorOccurred>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e02a      	b.n	8001ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fa0:	d01e      	beq.n	8001fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa2:	f7ff f9d5 	bl	8001350 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d302      	bcc.n	8001fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d113      	bne.n	8001fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbc:	f043 0220 	orr.w	r2, r3, #32
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e007      	b.n	8001ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d1cb      	bne.n	8001f86 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002004:	e028      	b.n	8002058 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 f830 	bl	8002070 <I2C_IsErrorOccurred>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e026      	b.n	8002068 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800201a:	f7ff f999 	bl	8001350 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	68ba      	ldr	r2, [r7, #8]
 8002026:	429a      	cmp	r2, r3
 8002028:	d302      	bcc.n	8002030 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d113      	bne.n	8002058 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002034:	f043 0220 	orr.w	r2, r3, #32
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e007      	b.n	8002068 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	2b20      	cmp	r3, #32
 8002064:	d1cf      	bne.n	8002006 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	; 0x28
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	f003 0310 	and.w	r3, r3, #16
 8002098:	2b00      	cmp	r3, #0
 800209a:	d075      	beq.n	8002188 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2210      	movs	r2, #16
 80020a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80020a4:	e056      	b.n	8002154 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020ac:	d052      	beq.n	8002154 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020ae:	f7ff f94f 	bl	8001350 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d302      	bcc.n	80020c4 <I2C_IsErrorOccurred+0x54>
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d147      	bne.n	8002154 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80020d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020e6:	d12e      	bne.n	8002146 <I2C_IsErrorOccurred+0xd6>
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020ee:	d02a      	beq.n	8002146 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80020f0:	7cfb      	ldrb	r3, [r7, #19]
 80020f2:	2b20      	cmp	r3, #32
 80020f4:	d027      	beq.n	8002146 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002104:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002106:	f7ff f923 	bl	8001350 <HAL_GetTick>
 800210a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800210c:	e01b      	b.n	8002146 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800210e:	f7ff f91f 	bl	8001350 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b19      	cmp	r3, #25
 800211a:	d914      	bls.n	8002146 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002120:	f043 0220 	orr.w	r2, r3, #32
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2220      	movs	r2, #32
 800212c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	f003 0320 	and.w	r3, r3, #32
 8002150:	2b20      	cmp	r3, #32
 8002152:	d1dc      	bne.n	800210e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f003 0320 	and.w	r3, r3, #32
 800215e:	2b20      	cmp	r3, #32
 8002160:	d003      	beq.n	800216a <I2C_IsErrorOccurred+0xfa>
 8002162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002166:	2b00      	cmp	r3, #0
 8002168:	d09d      	beq.n	80020a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800216a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800216e:	2b00      	cmp	r3, #0
 8002170:	d103      	bne.n	800217a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2220      	movs	r2, #32
 8002178:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	f043 0304 	orr.w	r3, r3, #4
 8002180:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00b      	beq.n	80021b2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00b      	beq.n	80021d4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	f043 0308 	orr.w	r3, r3, #8
 80021c2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00b      	beq.n	80021f6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80021de:	6a3b      	ldr	r3, [r7, #32]
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80021f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d01c      	beq.n	8002238 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f7ff fe56 	bl	8001eb0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6859      	ldr	r1, [r3, #4]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <I2C_IsErrorOccurred+0x1d4>)
 8002210:	400b      	ands	r3, r1
 8002212:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002218:	6a3b      	ldr	r3, [r7, #32]
 800221a:	431a      	orrs	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2220      	movs	r2, #32
 8002224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800223c:	4618      	mov	r0, r3
 800223e:	3728      	adds	r7, #40	; 0x28
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	fe00e800 	.word	0xfe00e800

08002248 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002248:	b480      	push	{r7}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	460b      	mov	r3, r1
 8002254:	817b      	strh	r3, [r7, #10]
 8002256:	4613      	mov	r3, r2
 8002258:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800225a:	897b      	ldrh	r3, [r7, #10]
 800225c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002260:	7a7b      	ldrb	r3, [r7, #9]
 8002262:	041b      	lsls	r3, r3, #16
 8002264:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002268:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	4313      	orrs	r3, r2
 8002272:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002276:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	0d5b      	lsrs	r3, r3, #21
 8002282:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <I2C_TransferConfig+0x60>)
 8002288:	430b      	orrs	r3, r1
 800228a:	43db      	mvns	r3, r3
 800228c:	ea02 0103 	and.w	r1, r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	430a      	orrs	r2, r1
 8002298:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800229a:	bf00      	nop
 800229c:	371c      	adds	r7, #28
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	03ff63ff 	.word	0x03ff63ff

080022ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b20      	cmp	r3, #32
 80022c0:	d138      	bne.n	8002334 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e032      	b.n	8002336 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2224      	movs	r2, #36	; 0x24
 80022dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0201 	bic.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6819      	ldr	r1, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	e000      	b.n	8002336 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002334:	2302      	movs	r3, #2
  }
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002342:	b480      	push	{r7}
 8002344:	b085      	sub	sp, #20
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b20      	cmp	r3, #32
 8002356:	d139      	bne.n	80023cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002362:	2302      	movs	r3, #2
 8002364:	e033      	b.n	80023ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2224      	movs	r2, #36	; 0x24
 8002372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0201 	bic.w	r2, r2, #1
 8002384:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002394:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	4313      	orrs	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2220      	movs	r2, #32
 80023bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	e000      	b.n	80023ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80023cc:	2302      	movs	r3, #2
  }
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a04      	ldr	r2, [pc, #16]	; (80023f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ea:	6013      	str	r3, [r2, #0]
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40007000 	.word	0x40007000

080023fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002400:	4b04      	ldr	r3, [pc, #16]	; (8002414 <HAL_PWREx_GetVoltageRange+0x18>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40007000 	.word	0x40007000

08002418 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002426:	d130      	bne.n	800248a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002428:	4b23      	ldr	r3, [pc, #140]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002434:	d038      	beq.n	80024a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800243e:	4a1e      	ldr	r2, [pc, #120]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002440:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002444:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002446:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2232      	movs	r2, #50	; 0x32
 800244c:	fb02 f303 	mul.w	r3, r2, r3
 8002450:	4a1b      	ldr	r2, [pc, #108]	; (80024c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	0c9b      	lsrs	r3, r3, #18
 8002458:	3301      	adds	r3, #1
 800245a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800245c:	e002      	b.n	8002464 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	3b01      	subs	r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002464:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800246c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002470:	d102      	bne.n	8002478 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1f2      	bne.n	800245e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002478:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002484:	d110      	bne.n	80024a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e00f      	b.n	80024aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800248a:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002496:	d007      	beq.n	80024a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002498:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024a0:	4a05      	ldr	r2, [pc, #20]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40007000 	.word	0x40007000
 80024bc:	20000000 	.word	0x20000000
 80024c0:	431bde83 	.word	0x431bde83

080024c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d102      	bne.n	80024d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	f000 bc02 	b.w	8002cdc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024d8:	4b96      	ldr	r3, [pc, #600]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 030c 	and.w	r3, r3, #12
 80024e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024e2:	4b94      	ldr	r3, [pc, #592]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0310 	and.w	r3, r3, #16
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 80e4 	beq.w	80026c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d007      	beq.n	8002510 <HAL_RCC_OscConfig+0x4c>
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	2b0c      	cmp	r3, #12
 8002504:	f040 808b 	bne.w	800261e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	2b01      	cmp	r3, #1
 800250c:	f040 8087 	bne.w	800261e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002510:	4b88      	ldr	r3, [pc, #544]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <HAL_RCC_OscConfig+0x64>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e3d9      	b.n	8002cdc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1a      	ldr	r2, [r3, #32]
 800252c:	4b81      	ldr	r3, [pc, #516]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b00      	cmp	r3, #0
 8002536:	d004      	beq.n	8002542 <HAL_RCC_OscConfig+0x7e>
 8002538:	4b7e      	ldr	r3, [pc, #504]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002540:	e005      	b.n	800254e <HAL_RCC_OscConfig+0x8a>
 8002542:	4b7c      	ldr	r3, [pc, #496]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 8002544:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800254e:	4293      	cmp	r3, r2
 8002550:	d223      	bcs.n	800259a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fd8c 	bl	8003074 <RCC_SetFlashLatencyFromMSIRange>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e3ba      	b.n	8002cdc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002566:	4b73      	ldr	r3, [pc, #460]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a72      	ldr	r2, [pc, #456]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 800256c:	f043 0308 	orr.w	r3, r3, #8
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	4b70      	ldr	r3, [pc, #448]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	496d      	ldr	r1, [pc, #436]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 8002580:	4313      	orrs	r3, r2
 8002582:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002584:	4b6b      	ldr	r3, [pc, #428]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	4968      	ldr	r1, [pc, #416]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
 8002598:	e025      	b.n	80025e6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800259a:	4b66      	ldr	r3, [pc, #408]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a65      	ldr	r2, [pc, #404]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 80025a0:	f043 0308 	orr.w	r3, r3, #8
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	4b63      	ldr	r3, [pc, #396]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	4960      	ldr	r1, [pc, #384]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025b8:	4b5e      	ldr	r3, [pc, #376]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	021b      	lsls	r3, r3, #8
 80025c6:	495b      	ldr	r1, [pc, #364]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fd4c 	bl	8003074 <RCC_SetFlashLatencyFromMSIRange>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e37a      	b.n	8002cdc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025e6:	f000 fc81 	bl	8002eec <HAL_RCC_GetSysClockFreq>
 80025ea:	4602      	mov	r2, r0
 80025ec:	4b51      	ldr	r3, [pc, #324]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	4950      	ldr	r1, [pc, #320]	; (8002738 <HAL_RCC_OscConfig+0x274>)
 80025f8:	5ccb      	ldrb	r3, [r1, r3]
 80025fa:	f003 031f 	and.w	r3, r3, #31
 80025fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002602:	4a4e      	ldr	r2, [pc, #312]	; (800273c <HAL_RCC_OscConfig+0x278>)
 8002604:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002606:	4b4e      	ldr	r3, [pc, #312]	; (8002740 <HAL_RCC_OscConfig+0x27c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fe50 	bl	80012b0 <HAL_InitTick>
 8002610:	4603      	mov	r3, r0
 8002612:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d052      	beq.n	80026c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	e35e      	b.n	8002cdc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d032      	beq.n	800268c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002626:	4b43      	ldr	r3, [pc, #268]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a42      	ldr	r2, [pc, #264]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002632:	f7fe fe8d 	bl	8001350 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800263a:	f7fe fe89 	bl	8001350 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e347      	b.n	8002cdc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800264c:	4b39      	ldr	r3, [pc, #228]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002658:	4b36      	ldr	r3, [pc, #216]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a35      	ldr	r2, [pc, #212]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 800265e:	f043 0308 	orr.w	r3, r3, #8
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	4b33      	ldr	r3, [pc, #204]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	4930      	ldr	r1, [pc, #192]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002676:	4b2f      	ldr	r3, [pc, #188]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	021b      	lsls	r3, r3, #8
 8002684:	492b      	ldr	r1, [pc, #172]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 8002686:	4313      	orrs	r3, r2
 8002688:	604b      	str	r3, [r1, #4]
 800268a:	e01a      	b.n	80026c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800268c:	4b29      	ldr	r3, [pc, #164]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a28      	ldr	r2, [pc, #160]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 8002692:	f023 0301 	bic.w	r3, r3, #1
 8002696:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002698:	f7fe fe5a 	bl	8001350 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026a0:	f7fe fe56 	bl	8001350 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e314      	b.n	8002cdc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026b2:	4b20      	ldr	r3, [pc, #128]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x1dc>
 80026be:	e000      	b.n	80026c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d073      	beq.n	80027b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d005      	beq.n	80026e0 <HAL_RCC_OscConfig+0x21c>
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	2b0c      	cmp	r3, #12
 80026d8:	d10e      	bne.n	80026f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d10b      	bne.n	80026f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e0:	4b14      	ldr	r3, [pc, #80]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d063      	beq.n	80027b4 <HAL_RCC_OscConfig+0x2f0>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d15f      	bne.n	80027b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e2f1      	b.n	8002cdc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002700:	d106      	bne.n	8002710 <HAL_RCC_OscConfig+0x24c>
 8002702:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a0b      	ldr	r2, [pc, #44]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 8002708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	e025      	b.n	800275c <HAL_RCC_OscConfig+0x298>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002718:	d114      	bne.n	8002744 <HAL_RCC_OscConfig+0x280>
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a05      	ldr	r2, [pc, #20]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 8002720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	4b03      	ldr	r3, [pc, #12]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a02      	ldr	r2, [pc, #8]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 800272c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	e013      	b.n	800275c <HAL_RCC_OscConfig+0x298>
 8002734:	40021000 	.word	0x40021000
 8002738:	08005b78 	.word	0x08005b78
 800273c:	20000000 	.word	0x20000000
 8002740:	20000004 	.word	0x20000004
 8002744:	4ba0      	ldr	r3, [pc, #640]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a9f      	ldr	r2, [pc, #636]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 800274a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274e:	6013      	str	r3, [r2, #0]
 8002750:	4b9d      	ldr	r3, [pc, #628]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a9c      	ldr	r2, [pc, #624]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 8002756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800275a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d013      	beq.n	800278c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002764:	f7fe fdf4 	bl	8001350 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800276c:	f7fe fdf0 	bl	8001350 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	; 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e2ae      	b.n	8002cdc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800277e:	4b92      	ldr	r3, [pc, #584]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0x2a8>
 800278a:	e014      	b.n	80027b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278c:	f7fe fde0 	bl	8001350 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002794:	f7fe fddc 	bl	8001350 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	; 0x64
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e29a      	b.n	8002cdc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027a6:	4b88      	ldr	r3, [pc, #544]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0x2d0>
 80027b2:	e000      	b.n	80027b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d060      	beq.n	8002884 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d005      	beq.n	80027d4 <HAL_RCC_OscConfig+0x310>
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	2b0c      	cmp	r3, #12
 80027cc:	d119      	bne.n	8002802 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d116      	bne.n	8002802 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027d4:	4b7c      	ldr	r3, [pc, #496]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_RCC_OscConfig+0x328>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e277      	b.n	8002cdc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ec:	4b76      	ldr	r3, [pc, #472]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	061b      	lsls	r3, r3, #24
 80027fa:	4973      	ldr	r1, [pc, #460]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002800:	e040      	b.n	8002884 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d023      	beq.n	8002852 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800280a:	4b6f      	ldr	r3, [pc, #444]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a6e      	ldr	r2, [pc, #440]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 8002810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002816:	f7fe fd9b 	bl	8001350 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800281e:	f7fe fd97 	bl	8001350 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e255      	b.n	8002cdc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002830:	4b65      	ldr	r3, [pc, #404]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283c:	4b62      	ldr	r3, [pc, #392]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	061b      	lsls	r3, r3, #24
 800284a:	495f      	ldr	r1, [pc, #380]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]
 8002850:	e018      	b.n	8002884 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002852:	4b5d      	ldr	r3, [pc, #372]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a5c      	ldr	r2, [pc, #368]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 8002858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800285c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285e:	f7fe fd77 	bl	8001350 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002866:	f7fe fd73 	bl	8001350 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e231      	b.n	8002cdc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002878:	4b53      	ldr	r3, [pc, #332]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1f0      	bne.n	8002866 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b00      	cmp	r3, #0
 800288e:	d03c      	beq.n	800290a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d01c      	beq.n	80028d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002898:	4b4b      	ldr	r3, [pc, #300]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 800289a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800289e:	4a4a      	ldr	r2, [pc, #296]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a8:	f7fe fd52 	bl	8001350 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b0:	f7fe fd4e 	bl	8001350 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e20c      	b.n	8002cdc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028c2:	4b41      	ldr	r3, [pc, #260]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 80028c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0ef      	beq.n	80028b0 <HAL_RCC_OscConfig+0x3ec>
 80028d0:	e01b      	b.n	800290a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d2:	4b3d      	ldr	r3, [pc, #244]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 80028d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d8:	4a3b      	ldr	r2, [pc, #236]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 80028da:	f023 0301 	bic.w	r3, r3, #1
 80028de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e2:	f7fe fd35 	bl	8001350 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ea:	f7fe fd31 	bl	8001350 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e1ef      	b.n	8002cdc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028fc:	4b32      	ldr	r3, [pc, #200]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 80028fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1ef      	bne.n	80028ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 80a6 	beq.w	8002a64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002918:	2300      	movs	r3, #0
 800291a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800291c:	4b2a      	ldr	r3, [pc, #168]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 800291e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10d      	bne.n	8002944 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002928:	4b27      	ldr	r3, [pc, #156]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 800292a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292c:	4a26      	ldr	r2, [pc, #152]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 800292e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002932:	6593      	str	r3, [r2, #88]	; 0x58
 8002934:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002940:	2301      	movs	r3, #1
 8002942:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002944:	4b21      	ldr	r3, [pc, #132]	; (80029cc <HAL_RCC_OscConfig+0x508>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294c:	2b00      	cmp	r3, #0
 800294e:	d118      	bne.n	8002982 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002950:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <HAL_RCC_OscConfig+0x508>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a1d      	ldr	r2, [pc, #116]	; (80029cc <HAL_RCC_OscConfig+0x508>)
 8002956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800295c:	f7fe fcf8 	bl	8001350 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002964:	f7fe fcf4 	bl	8001350 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e1b2      	b.n	8002cdc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002976:	4b15      	ldr	r3, [pc, #84]	; (80029cc <HAL_RCC_OscConfig+0x508>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d108      	bne.n	800299c <HAL_RCC_OscConfig+0x4d8>
 800298a:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 800298c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002990:	4a0d      	ldr	r2, [pc, #52]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800299a:	e029      	b.n	80029f0 <HAL_RCC_OscConfig+0x52c>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b05      	cmp	r3, #5
 80029a2:	d115      	bne.n	80029d0 <HAL_RCC_OscConfig+0x50c>
 80029a4:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029aa:	4a07      	ldr	r2, [pc, #28]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 80029ac:	f043 0304 	orr.w	r3, r3, #4
 80029b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029b4:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ba:	4a03      	ldr	r2, [pc, #12]	; (80029c8 <HAL_RCC_OscConfig+0x504>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029c4:	e014      	b.n	80029f0 <HAL_RCC_OscConfig+0x52c>
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40007000 	.word	0x40007000
 80029d0:	4b9a      	ldr	r3, [pc, #616]	; (8002c3c <HAL_RCC_OscConfig+0x778>)
 80029d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d6:	4a99      	ldr	r2, [pc, #612]	; (8002c3c <HAL_RCC_OscConfig+0x778>)
 80029d8:	f023 0301 	bic.w	r3, r3, #1
 80029dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029e0:	4b96      	ldr	r3, [pc, #600]	; (8002c3c <HAL_RCC_OscConfig+0x778>)
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e6:	4a95      	ldr	r2, [pc, #596]	; (8002c3c <HAL_RCC_OscConfig+0x778>)
 80029e8:	f023 0304 	bic.w	r3, r3, #4
 80029ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d016      	beq.n	8002a26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f8:	f7fe fcaa 	bl	8001350 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029fe:	e00a      	b.n	8002a16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a00:	f7fe fca6 	bl	8001350 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e162      	b.n	8002cdc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a16:	4b89      	ldr	r3, [pc, #548]	; (8002c3c <HAL_RCC_OscConfig+0x778>)
 8002a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0ed      	beq.n	8002a00 <HAL_RCC_OscConfig+0x53c>
 8002a24:	e015      	b.n	8002a52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a26:	f7fe fc93 	bl	8001350 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a2c:	e00a      	b.n	8002a44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2e:	f7fe fc8f 	bl	8001350 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e14b      	b.n	8002cdc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a44:	4b7d      	ldr	r3, [pc, #500]	; (8002c3c <HAL_RCC_OscConfig+0x778>)
 8002a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1ed      	bne.n	8002a2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a52:	7ffb      	ldrb	r3, [r7, #31]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d105      	bne.n	8002a64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a58:	4b78      	ldr	r3, [pc, #480]	; (8002c3c <HAL_RCC_OscConfig+0x778>)
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5c:	4a77      	ldr	r2, [pc, #476]	; (8002c3c <HAL_RCC_OscConfig+0x778>)
 8002a5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a62:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0320 	and.w	r3, r3, #32
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d03c      	beq.n	8002aea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d01c      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a78:	4b70      	ldr	r3, [pc, #448]	; (8002c3c <HAL_RCC_OscConfig+0x778>)
 8002a7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a7e:	4a6f      	ldr	r2, [pc, #444]	; (8002c3c <HAL_RCC_OscConfig+0x778>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a88:	f7fe fc62 	bl	8001350 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a90:	f7fe fc5e 	bl	8001350 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e11c      	b.n	8002cdc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002aa2:	4b66      	ldr	r3, [pc, #408]	; (8002c3c <HAL_RCC_OscConfig+0x778>)
 8002aa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0ef      	beq.n	8002a90 <HAL_RCC_OscConfig+0x5cc>
 8002ab0:	e01b      	b.n	8002aea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ab2:	4b62      	ldr	r3, [pc, #392]	; (8002c3c <HAL_RCC_OscConfig+0x778>)
 8002ab4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ab8:	4a60      	ldr	r2, [pc, #384]	; (8002c3c <HAL_RCC_OscConfig+0x778>)
 8002aba:	f023 0301 	bic.w	r3, r3, #1
 8002abe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac2:	f7fe fc45 	bl	8001350 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aca:	f7fe fc41 	bl	8001350 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e0ff      	b.n	8002cdc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002adc:	4b57      	ldr	r3, [pc, #348]	; (8002c3c <HAL_RCC_OscConfig+0x778>)
 8002ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1ef      	bne.n	8002aca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 80f3 	beq.w	8002cda <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	f040 80c9 	bne.w	8002c90 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002afe:	4b4f      	ldr	r3, [pc, #316]	; (8002c3c <HAL_RCC_OscConfig+0x778>)
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f003 0203 	and.w	r2, r3, #3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d12c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d123      	bne.n	8002b6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d11b      	bne.n	8002b6c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d113      	bne.n	8002b6c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4e:	085b      	lsrs	r3, r3, #1
 8002b50:	3b01      	subs	r3, #1
 8002b52:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d109      	bne.n	8002b6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	085b      	lsrs	r3, r3, #1
 8002b64:	3b01      	subs	r3, #1
 8002b66:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d06b      	beq.n	8002c44 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2b0c      	cmp	r3, #12
 8002b70:	d062      	beq.n	8002c38 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b72:	4b32      	ldr	r3, [pc, #200]	; (8002c3c <HAL_RCC_OscConfig+0x778>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e0ac      	b.n	8002cdc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b82:	4b2e      	ldr	r3, [pc, #184]	; (8002c3c <HAL_RCC_OscConfig+0x778>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a2d      	ldr	r2, [pc, #180]	; (8002c3c <HAL_RCC_OscConfig+0x778>)
 8002b88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b8c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b8e:	f7fe fbdf 	bl	8001350 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b96:	f7fe fbdb 	bl	8001350 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e099      	b.n	8002cdc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba8:	4b24      	ldr	r3, [pc, #144]	; (8002c3c <HAL_RCC_OscConfig+0x778>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1f0      	bne.n	8002b96 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bb4:	4b21      	ldr	r3, [pc, #132]	; (8002c3c <HAL_RCC_OscConfig+0x778>)
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <HAL_RCC_OscConfig+0x77c>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002bc4:	3a01      	subs	r2, #1
 8002bc6:	0112      	lsls	r2, r2, #4
 8002bc8:	4311      	orrs	r1, r2
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bce:	0212      	lsls	r2, r2, #8
 8002bd0:	4311      	orrs	r1, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bd6:	0852      	lsrs	r2, r2, #1
 8002bd8:	3a01      	subs	r2, #1
 8002bda:	0552      	lsls	r2, r2, #21
 8002bdc:	4311      	orrs	r1, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002be2:	0852      	lsrs	r2, r2, #1
 8002be4:	3a01      	subs	r2, #1
 8002be6:	0652      	lsls	r2, r2, #25
 8002be8:	4311      	orrs	r1, r2
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bee:	06d2      	lsls	r2, r2, #27
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	4912      	ldr	r1, [pc, #72]	; (8002c3c <HAL_RCC_OscConfig+0x778>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bf8:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <HAL_RCC_OscConfig+0x778>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0f      	ldr	r2, [pc, #60]	; (8002c3c <HAL_RCC_OscConfig+0x778>)
 8002bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c04:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <HAL_RCC_OscConfig+0x778>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4a0c      	ldr	r2, [pc, #48]	; (8002c3c <HAL_RCC_OscConfig+0x778>)
 8002c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c10:	f7fe fb9e 	bl	8001350 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c18:	f7fe fb9a 	bl	8001350 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e058      	b.n	8002cdc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c2a:	4b04      	ldr	r3, [pc, #16]	; (8002c3c <HAL_RCC_OscConfig+0x778>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c36:	e050      	b.n	8002cda <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e04f      	b.n	8002cdc <HAL_RCC_OscConfig+0x818>
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c44:	4b27      	ldr	r3, [pc, #156]	; (8002ce4 <HAL_RCC_OscConfig+0x820>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d144      	bne.n	8002cda <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c50:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <HAL_RCC_OscConfig+0x820>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a23      	ldr	r2, [pc, #140]	; (8002ce4 <HAL_RCC_OscConfig+0x820>)
 8002c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c5c:	4b21      	ldr	r3, [pc, #132]	; (8002ce4 <HAL_RCC_OscConfig+0x820>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4a20      	ldr	r2, [pc, #128]	; (8002ce4 <HAL_RCC_OscConfig+0x820>)
 8002c62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c68:	f7fe fb72 	bl	8001350 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c70:	f7fe fb6e 	bl	8001350 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e02c      	b.n	8002cdc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c82:	4b18      	ldr	r3, [pc, #96]	; (8002ce4 <HAL_RCC_OscConfig+0x820>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0x7ac>
 8002c8e:	e024      	b.n	8002cda <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	2b0c      	cmp	r3, #12
 8002c94:	d01f      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c96:	4b13      	ldr	r3, [pc, #76]	; (8002ce4 <HAL_RCC_OscConfig+0x820>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a12      	ldr	r2, [pc, #72]	; (8002ce4 <HAL_RCC_OscConfig+0x820>)
 8002c9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca2:	f7fe fb55 	bl	8001350 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002caa:	f7fe fb51 	bl	8001350 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e00f      	b.n	8002cdc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cbc:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_RCC_OscConfig+0x820>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f0      	bne.n	8002caa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <HAL_RCC_OscConfig+0x820>)
 8002cca:	68da      	ldr	r2, [r3, #12]
 8002ccc:	4905      	ldr	r1, [pc, #20]	; (8002ce4 <HAL_RCC_OscConfig+0x820>)
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_RCC_OscConfig+0x824>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	60cb      	str	r3, [r1, #12]
 8002cd4:	e001      	b.n	8002cda <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3720      	adds	r7, #32
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	feeefffc 	.word	0xfeeefffc

08002cec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0e7      	b.n	8002ed0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d00:	4b75      	ldr	r3, [pc, #468]	; (8002ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d910      	bls.n	8002d30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0e:	4b72      	ldr	r3, [pc, #456]	; (8002ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 0207 	bic.w	r2, r3, #7
 8002d16:	4970      	ldr	r1, [pc, #448]	; (8002ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1e:	4b6e      	ldr	r3, [pc, #440]	; (8002ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d001      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0cf      	b.n	8002ed0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d010      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	4b66      	ldr	r3, [pc, #408]	; (8002edc <HAL_RCC_ClockConfig+0x1f0>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d908      	bls.n	8002d5e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d4c:	4b63      	ldr	r3, [pc, #396]	; (8002edc <HAL_RCC_ClockConfig+0x1f0>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	4960      	ldr	r1, [pc, #384]	; (8002edc <HAL_RCC_ClockConfig+0x1f0>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d04c      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d107      	bne.n	8002d82 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d72:	4b5a      	ldr	r3, [pc, #360]	; (8002edc <HAL_RCC_ClockConfig+0x1f0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d121      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e0a6      	b.n	8002ed0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d107      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d8a:	4b54      	ldr	r3, [pc, #336]	; (8002edc <HAL_RCC_ClockConfig+0x1f0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d115      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e09a      	b.n	8002ed0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d107      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002da2:	4b4e      	ldr	r3, [pc, #312]	; (8002edc <HAL_RCC_ClockConfig+0x1f0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d109      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e08e      	b.n	8002ed0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002db2:	4b4a      	ldr	r3, [pc, #296]	; (8002edc <HAL_RCC_ClockConfig+0x1f0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e086      	b.n	8002ed0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dc2:	4b46      	ldr	r3, [pc, #280]	; (8002edc <HAL_RCC_ClockConfig+0x1f0>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f023 0203 	bic.w	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	4943      	ldr	r1, [pc, #268]	; (8002edc <HAL_RCC_ClockConfig+0x1f0>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dd4:	f7fe fabc 	bl	8001350 <HAL_GetTick>
 8002dd8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dda:	e00a      	b.n	8002df2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ddc:	f7fe fab8 	bl	8001350 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e06e      	b.n	8002ed0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df2:	4b3a      	ldr	r3, [pc, #232]	; (8002edc <HAL_RCC_ClockConfig+0x1f0>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 020c 	and.w	r2, r3, #12
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d1eb      	bne.n	8002ddc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d010      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	4b31      	ldr	r3, [pc, #196]	; (8002edc <HAL_RCC_ClockConfig+0x1f0>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d208      	bcs.n	8002e32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e20:	4b2e      	ldr	r3, [pc, #184]	; (8002edc <HAL_RCC_ClockConfig+0x1f0>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	492b      	ldr	r1, [pc, #172]	; (8002edc <HAL_RCC_ClockConfig+0x1f0>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e32:	4b29      	ldr	r3, [pc, #164]	; (8002ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d210      	bcs.n	8002e62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e40:	4b25      	ldr	r3, [pc, #148]	; (8002ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f023 0207 	bic.w	r2, r3, #7
 8002e48:	4923      	ldr	r1, [pc, #140]	; (8002ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e50:	4b21      	ldr	r3, [pc, #132]	; (8002ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d001      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e036      	b.n	8002ed0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d008      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e6e:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <HAL_RCC_ClockConfig+0x1f0>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	4918      	ldr	r1, [pc, #96]	; (8002edc <HAL_RCC_ClockConfig+0x1f0>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d009      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e8c:	4b13      	ldr	r3, [pc, #76]	; (8002edc <HAL_RCC_ClockConfig+0x1f0>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4910      	ldr	r1, [pc, #64]	; (8002edc <HAL_RCC_ClockConfig+0x1f0>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ea0:	f000 f824 	bl	8002eec <HAL_RCC_GetSysClockFreq>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	; (8002edc <HAL_RCC_ClockConfig+0x1f0>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	091b      	lsrs	r3, r3, #4
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	490b      	ldr	r1, [pc, #44]	; (8002ee0 <HAL_RCC_ClockConfig+0x1f4>)
 8002eb2:	5ccb      	ldrb	r3, [r1, r3]
 8002eb4:	f003 031f 	and.w	r3, r3, #31
 8002eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ebc:	4a09      	ldr	r2, [pc, #36]	; (8002ee4 <HAL_RCC_ClockConfig+0x1f8>)
 8002ebe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ec0:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <HAL_RCC_ClockConfig+0x1fc>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fe f9f3 	bl	80012b0 <HAL_InitTick>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ece:	7afb      	ldrb	r3, [r7, #11]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40022000 	.word	0x40022000
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	08005b78 	.word	0x08005b78
 8002ee4:	20000000 	.word	0x20000000
 8002ee8:	20000004 	.word	0x20000004

08002eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b089      	sub	sp, #36	; 0x24
 8002ef0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61fb      	str	r3, [r7, #28]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002efa:	4b3e      	ldr	r3, [pc, #248]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f04:	4b3b      	ldr	r3, [pc, #236]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f003 0303 	and.w	r3, r3, #3
 8002f0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x34>
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	2b0c      	cmp	r3, #12
 8002f18:	d121      	bne.n	8002f5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d11e      	bne.n	8002f5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f20:	4b34      	ldr	r3, [pc, #208]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d107      	bne.n	8002f3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f2c:	4b31      	ldr	r3, [pc, #196]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f32:	0a1b      	lsrs	r3, r3, #8
 8002f34:	f003 030f 	and.w	r3, r3, #15
 8002f38:	61fb      	str	r3, [r7, #28]
 8002f3a:	e005      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f3c:	4b2d      	ldr	r3, [pc, #180]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	091b      	lsrs	r3, r3, #4
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f48:	4a2b      	ldr	r2, [pc, #172]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10d      	bne.n	8002f74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f5c:	e00a      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d102      	bne.n	8002f6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f64:	4b25      	ldr	r3, [pc, #148]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x110>)
 8002f66:	61bb      	str	r3, [r7, #24]
 8002f68:	e004      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d101      	bne.n	8002f74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f70:	4b23      	ldr	r3, [pc, #140]	; (8003000 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	2b0c      	cmp	r3, #12
 8002f78:	d134      	bne.n	8002fe4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f7a:	4b1e      	ldr	r3, [pc, #120]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d003      	beq.n	8002f92 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d003      	beq.n	8002f98 <HAL_RCC_GetSysClockFreq+0xac>
 8002f90:	e005      	b.n	8002f9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f92:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x110>)
 8002f94:	617b      	str	r3, [r7, #20]
      break;
 8002f96:	e005      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f98:	4b19      	ldr	r3, [pc, #100]	; (8003000 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f9a:	617b      	str	r3, [r7, #20]
      break;
 8002f9c:	e002      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	617b      	str	r3, [r7, #20]
      break;
 8002fa2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fa4:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	091b      	lsrs	r3, r3, #4
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	3301      	adds	r3, #1
 8002fb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fb2:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	0a1b      	lsrs	r3, r3, #8
 8002fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	fb03 f202 	mul.w	r2, r3, r2
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fca:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	0e5b      	lsrs	r3, r3, #25
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fe4:	69bb      	ldr	r3, [r7, #24]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3724      	adds	r7, #36	; 0x24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	08005b90 	.word	0x08005b90
 8002ffc:	00f42400 	.word	0x00f42400
 8003000:	007a1200 	.word	0x007a1200

08003004 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003008:	4b03      	ldr	r3, [pc, #12]	; (8003018 <HAL_RCC_GetHCLKFreq+0x14>)
 800300a:	681b      	ldr	r3, [r3, #0]
}
 800300c:	4618      	mov	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	20000000 	.word	0x20000000

0800301c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003020:	f7ff fff0 	bl	8003004 <HAL_RCC_GetHCLKFreq>
 8003024:	4602      	mov	r2, r0
 8003026:	4b06      	ldr	r3, [pc, #24]	; (8003040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	0a1b      	lsrs	r3, r3, #8
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	4904      	ldr	r1, [pc, #16]	; (8003044 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003032:	5ccb      	ldrb	r3, [r1, r3]
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800303c:	4618      	mov	r0, r3
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40021000 	.word	0x40021000
 8003044:	08005b88 	.word	0x08005b88

08003048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800304c:	f7ff ffda 	bl	8003004 <HAL_RCC_GetHCLKFreq>
 8003050:	4602      	mov	r2, r0
 8003052:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	0adb      	lsrs	r3, r3, #11
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	4904      	ldr	r1, [pc, #16]	; (8003070 <HAL_RCC_GetPCLK2Freq+0x28>)
 800305e:	5ccb      	ldrb	r3, [r1, r3]
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003068:	4618      	mov	r0, r3
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40021000 	.word	0x40021000
 8003070:	08005b88 	.word	0x08005b88

08003074 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800307c:	2300      	movs	r3, #0
 800307e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003080:	4b2a      	ldr	r3, [pc, #168]	; (800312c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800308c:	f7ff f9b6 	bl	80023fc <HAL_PWREx_GetVoltageRange>
 8003090:	6178      	str	r0, [r7, #20]
 8003092:	e014      	b.n	80030be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003094:	4b25      	ldr	r3, [pc, #148]	; (800312c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003098:	4a24      	ldr	r2, [pc, #144]	; (800312c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800309a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309e:	6593      	str	r3, [r2, #88]	; 0x58
 80030a0:	4b22      	ldr	r3, [pc, #136]	; (800312c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030ac:	f7ff f9a6 	bl	80023fc <HAL_PWREx_GetVoltageRange>
 80030b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030b2:	4b1e      	ldr	r3, [pc, #120]	; (800312c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b6:	4a1d      	ldr	r2, [pc, #116]	; (800312c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030c4:	d10b      	bne.n	80030de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b80      	cmp	r3, #128	; 0x80
 80030ca:	d919      	bls.n	8003100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2ba0      	cmp	r3, #160	; 0xa0
 80030d0:	d902      	bls.n	80030d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030d2:	2302      	movs	r3, #2
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	e013      	b.n	8003100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030d8:	2301      	movs	r3, #1
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	e010      	b.n	8003100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b80      	cmp	r3, #128	; 0x80
 80030e2:	d902      	bls.n	80030ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030e4:	2303      	movs	r3, #3
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	e00a      	b.n	8003100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b80      	cmp	r3, #128	; 0x80
 80030ee:	d102      	bne.n	80030f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030f0:	2302      	movs	r3, #2
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	e004      	b.n	8003100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b70      	cmp	r3, #112	; 0x70
 80030fa:	d101      	bne.n	8003100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030fc:	2301      	movs	r3, #1
 80030fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f023 0207 	bic.w	r2, r3, #7
 8003108:	4909      	ldr	r1, [pc, #36]	; (8003130 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003110:	4b07      	ldr	r3, [pc, #28]	; (8003130 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	429a      	cmp	r2, r3
 800311c:	d001      	beq.n	8003122 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40021000 	.word	0x40021000
 8003130:	40022000 	.word	0x40022000

08003134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800313c:	2300      	movs	r3, #0
 800313e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003140:	2300      	movs	r3, #0
 8003142:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800314c:	2b00      	cmp	r3, #0
 800314e:	d031      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003154:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003158:	d01a      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800315a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800315e:	d814      	bhi.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003160:	2b00      	cmp	r3, #0
 8003162:	d009      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003164:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003168:	d10f      	bne.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800316a:	4b5d      	ldr	r3, [pc, #372]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	4a5c      	ldr	r2, [pc, #368]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003174:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003176:	e00c      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3304      	adds	r3, #4
 800317c:	2100      	movs	r1, #0
 800317e:	4618      	mov	r0, r3
 8003180:	f000 f9de 	bl	8003540 <RCCEx_PLLSAI1_Config>
 8003184:	4603      	mov	r3, r0
 8003186:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003188:	e003      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	74fb      	strb	r3, [r7, #19]
      break;
 800318e:	e000      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003190:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003192:	7cfb      	ldrb	r3, [r7, #19]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10b      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003198:	4b51      	ldr	r3, [pc, #324]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a6:	494e      	ldr	r1, [pc, #312]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031ae:	e001      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b0:	7cfb      	ldrb	r3, [r7, #19]
 80031b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 809e 	beq.w	80032fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031c2:	2300      	movs	r3, #0
 80031c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031c6:	4b46      	ldr	r3, [pc, #280]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80031d6:	2300      	movs	r3, #0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00d      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031dc:	4b40      	ldr	r3, [pc, #256]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e0:	4a3f      	ldr	r2, [pc, #252]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e6:	6593      	str	r3, [r2, #88]	; 0x58
 80031e8:	4b3d      	ldr	r3, [pc, #244]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f0:	60bb      	str	r3, [r7, #8]
 80031f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031f4:	2301      	movs	r3, #1
 80031f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031f8:	4b3a      	ldr	r3, [pc, #232]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a39      	ldr	r2, [pc, #228]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80031fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003202:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003204:	f7fe f8a4 	bl	8001350 <HAL_GetTick>
 8003208:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800320a:	e009      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320c:	f7fe f8a0 	bl	8001350 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d902      	bls.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	74fb      	strb	r3, [r7, #19]
        break;
 800321e:	e005      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003220:	4b30      	ldr	r3, [pc, #192]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0ef      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d15a      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003232:	4b2b      	ldr	r3, [pc, #172]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d01e      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	429a      	cmp	r2, r3
 800324c:	d019      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800324e:	4b24      	ldr	r3, [pc, #144]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003258:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800325a:	4b21      	ldr	r3, [pc, #132]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800325c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003260:	4a1f      	ldr	r2, [pc, #124]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003266:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800326a:	4b1d      	ldr	r3, [pc, #116]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800326c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003270:	4a1b      	ldr	r2, [pc, #108]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800327a:	4a19      	ldr	r2, [pc, #100]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d016      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7fe f860 	bl	8001350 <HAL_GetTick>
 8003290:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003292:	e00b      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003294:	f7fe f85c 	bl	8001350 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d902      	bls.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	74fb      	strb	r3, [r7, #19]
            break;
 80032aa:	e006      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ac:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0ec      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80032ba:	7cfb      	ldrb	r3, [r7, #19]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10b      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032c0:	4b07      	ldr	r3, [pc, #28]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ce:	4904      	ldr	r1, [pc, #16]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032d6:	e009      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032d8:	7cfb      	ldrb	r3, [r7, #19]
 80032da:	74bb      	strb	r3, [r7, #18]
 80032dc:	e006      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e8:	7cfb      	ldrb	r3, [r7, #19]
 80032ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ec:	7c7b      	ldrb	r3, [r7, #17]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d105      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f2:	4b8a      	ldr	r3, [pc, #552]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f6:	4a89      	ldr	r2, [pc, #548]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800330a:	4b84      	ldr	r3, [pc, #528]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003310:	f023 0203 	bic.w	r2, r3, #3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	4980      	ldr	r1, [pc, #512]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800332c:	4b7b      	ldr	r3, [pc, #492]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003332:	f023 020c 	bic.w	r2, r3, #12
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	4978      	ldr	r1, [pc, #480]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0320 	and.w	r3, r3, #32
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800334e:	4b73      	ldr	r3, [pc, #460]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003354:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	496f      	ldr	r1, [pc, #444]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003370:	4b6a      	ldr	r3, [pc, #424]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003376:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337e:	4967      	ldr	r1, [pc, #412]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003392:	4b62      	ldr	r3, [pc, #392]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003398:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a0:	495e      	ldr	r1, [pc, #376]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033b4:	4b59      	ldr	r3, [pc, #356]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	4956      	ldr	r1, [pc, #344]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033d6:	4b51      	ldr	r3, [pc, #324]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	494d      	ldr	r1, [pc, #308]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d028      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033f8:	4b48      	ldr	r3, [pc, #288]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	4945      	ldr	r1, [pc, #276]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003416:	d106      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003418:	4b40      	ldr	r3, [pc, #256]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	4a3f      	ldr	r2, [pc, #252]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800341e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003422:	60d3      	str	r3, [r2, #12]
 8003424:	e011      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800342e:	d10c      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3304      	adds	r3, #4
 8003434:	2101      	movs	r1, #1
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f882 	bl	8003540 <RCCEx_PLLSAI1_Config>
 800343c:	4603      	mov	r3, r0
 800343e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003440:	7cfb      	ldrb	r3, [r7, #19]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003446:	7cfb      	ldrb	r3, [r7, #19]
 8003448:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d028      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003456:	4b31      	ldr	r3, [pc, #196]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003464:	492d      	ldr	r1, [pc, #180]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003470:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003474:	d106      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003476:	4b29      	ldr	r3, [pc, #164]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	4a28      	ldr	r2, [pc, #160]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800347c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003480:	60d3      	str	r3, [r2, #12]
 8003482:	e011      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003488:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800348c:	d10c      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3304      	adds	r3, #4
 8003492:	2101      	movs	r1, #1
 8003494:	4618      	mov	r0, r3
 8003496:	f000 f853 	bl	8003540 <RCCEx_PLLSAI1_Config>
 800349a:	4603      	mov	r3, r0
 800349c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800349e:	7cfb      	ldrb	r3, [r7, #19]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80034a4:	7cfb      	ldrb	r3, [r7, #19]
 80034a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d01c      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034b4:	4b19      	ldr	r3, [pc, #100]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c2:	4916      	ldr	r1, [pc, #88]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034d2:	d10c      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3304      	adds	r3, #4
 80034d8:	2102      	movs	r1, #2
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 f830 	bl	8003540 <RCCEx_PLLSAI1_Config>
 80034e0:	4603      	mov	r3, r0
 80034e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034e4:	7cfb      	ldrb	r3, [r7, #19]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80034ea:	7cfb      	ldrb	r3, [r7, #19]
 80034ec:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034fa:	4b08      	ldr	r3, [pc, #32]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003500:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003508:	4904      	ldr	r1, [pc, #16]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800350a:	4313      	orrs	r3, r2
 800350c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003510:	7cbb      	ldrb	r3, [r7, #18]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000

08003520 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a04      	ldr	r2, [pc, #16]	; (800353c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800352a:	f043 0304 	orr.w	r3, r3, #4
 800352e:	6013      	str	r3, [r2, #0]
}
 8003530:	bf00      	nop
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000

08003540 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800354e:	4b74      	ldr	r3, [pc, #464]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d018      	beq.n	800358c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800355a:	4b71      	ldr	r3, [pc, #452]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f003 0203 	and.w	r2, r3, #3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d10d      	bne.n	8003586 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
       ||
 800356e:	2b00      	cmp	r3, #0
 8003570:	d009      	beq.n	8003586 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003572:	4b6b      	ldr	r3, [pc, #428]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	091b      	lsrs	r3, r3, #4
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
       ||
 8003582:	429a      	cmp	r2, r3
 8003584:	d047      	beq.n	8003616 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	73fb      	strb	r3, [r7, #15]
 800358a:	e044      	b.n	8003616 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b03      	cmp	r3, #3
 8003592:	d018      	beq.n	80035c6 <RCCEx_PLLSAI1_Config+0x86>
 8003594:	2b03      	cmp	r3, #3
 8003596:	d825      	bhi.n	80035e4 <RCCEx_PLLSAI1_Config+0xa4>
 8003598:	2b01      	cmp	r3, #1
 800359a:	d002      	beq.n	80035a2 <RCCEx_PLLSAI1_Config+0x62>
 800359c:	2b02      	cmp	r3, #2
 800359e:	d009      	beq.n	80035b4 <RCCEx_PLLSAI1_Config+0x74>
 80035a0:	e020      	b.n	80035e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035a2:	4b5f      	ldr	r3, [pc, #380]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d11d      	bne.n	80035ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035b2:	e01a      	b.n	80035ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035b4:	4b5a      	ldr	r3, [pc, #360]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d116      	bne.n	80035ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c4:	e013      	b.n	80035ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035c6:	4b56      	ldr	r3, [pc, #344]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10f      	bne.n	80035f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035d2:	4b53      	ldr	r3, [pc, #332]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035e2:	e006      	b.n	80035f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	73fb      	strb	r3, [r7, #15]
      break;
 80035e8:	e004      	b.n	80035f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035ea:	bf00      	nop
 80035ec:	e002      	b.n	80035f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035ee:	bf00      	nop
 80035f0:	e000      	b.n	80035f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10d      	bne.n	8003616 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035fa:	4b49      	ldr	r3, [pc, #292]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6819      	ldr	r1, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	3b01      	subs	r3, #1
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	430b      	orrs	r3, r1
 8003610:	4943      	ldr	r1, [pc, #268]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003612:	4313      	orrs	r3, r2
 8003614:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d17c      	bne.n	8003716 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800361c:	4b40      	ldr	r3, [pc, #256]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a3f      	ldr	r2, [pc, #252]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003622:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003626:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003628:	f7fd fe92 	bl	8001350 <HAL_GetTick>
 800362c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800362e:	e009      	b.n	8003644 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003630:	f7fd fe8e 	bl	8001350 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d902      	bls.n	8003644 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	73fb      	strb	r3, [r7, #15]
        break;
 8003642:	e005      	b.n	8003650 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003644:	4b36      	ldr	r3, [pc, #216]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1ef      	bne.n	8003630 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003650:	7bfb      	ldrb	r3, [r7, #15]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d15f      	bne.n	8003716 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d110      	bne.n	800367e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800365c:	4b30      	ldr	r3, [pc, #192]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003664:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6892      	ldr	r2, [r2, #8]
 800366c:	0211      	lsls	r1, r2, #8
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	68d2      	ldr	r2, [r2, #12]
 8003672:	06d2      	lsls	r2, r2, #27
 8003674:	430a      	orrs	r2, r1
 8003676:	492a      	ldr	r1, [pc, #168]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003678:	4313      	orrs	r3, r2
 800367a:	610b      	str	r3, [r1, #16]
 800367c:	e027      	b.n	80036ce <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d112      	bne.n	80036aa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003684:	4b26      	ldr	r3, [pc, #152]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800368c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6892      	ldr	r2, [r2, #8]
 8003694:	0211      	lsls	r1, r2, #8
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6912      	ldr	r2, [r2, #16]
 800369a:	0852      	lsrs	r2, r2, #1
 800369c:	3a01      	subs	r2, #1
 800369e:	0552      	lsls	r2, r2, #21
 80036a0:	430a      	orrs	r2, r1
 80036a2:	491f      	ldr	r1, [pc, #124]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	610b      	str	r3, [r1, #16]
 80036a8:	e011      	b.n	80036ce <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036aa:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6892      	ldr	r2, [r2, #8]
 80036ba:	0211      	lsls	r1, r2, #8
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6952      	ldr	r2, [r2, #20]
 80036c0:	0852      	lsrs	r2, r2, #1
 80036c2:	3a01      	subs	r2, #1
 80036c4:	0652      	lsls	r2, r2, #25
 80036c6:	430a      	orrs	r2, r1
 80036c8:	4915      	ldr	r1, [pc, #84]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036ce:	4b14      	ldr	r3, [pc, #80]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a13      	ldr	r2, [pc, #76]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036da:	f7fd fe39 	bl	8001350 <HAL_GetTick>
 80036de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036e0:	e009      	b.n	80036f6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036e2:	f7fd fe35 	bl	8001350 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d902      	bls.n	80036f6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	73fb      	strb	r3, [r7, #15]
          break;
 80036f4:	e005      	b.n	8003702 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036f6:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0ef      	beq.n	80036e2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d106      	bne.n	8003716 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003708:	4b05      	ldr	r3, [pc, #20]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	4903      	ldr	r1, [pc, #12]	; (8003720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003712:	4313      	orrs	r3, r2
 8003714:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003716:	7bfb      	ldrb	r3, [r7, #15]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40021000 	.word	0x40021000

08003724 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e095      	b.n	8003862 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	2b00      	cmp	r3, #0
 800373c:	d108      	bne.n	8003750 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003746:	d009      	beq.n	800375c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	61da      	str	r2, [r3, #28]
 800374e:	e005      	b.n	800375c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d106      	bne.n	800377c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fd fbca 	bl	8000f10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003792:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800379c:	d902      	bls.n	80037a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	e002      	b.n	80037aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80037a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80037b2:	d007      	beq.n	80037c4 <HAL_SPI_Init+0xa0>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037bc:	d002      	beq.n	80037c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003806:	ea42 0103 	orr.w	r1, r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	0c1b      	lsrs	r3, r3, #16
 8003820:	f003 0204 	and.w	r2, r3, #4
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003840:	ea42 0103 	orr.w	r1, r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b088      	sub	sp, #32
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	4613      	mov	r3, r2
 8003878:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_SPI_Transmit+0x22>
 8003888:	2302      	movs	r3, #2
 800388a:	e158      	b.n	8003b3e <HAL_SPI_Transmit+0x2d4>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003894:	f7fd fd5c 	bl	8001350 <HAL_GetTick>
 8003898:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800389a:	88fb      	ldrh	r3, [r7, #6]
 800389c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d002      	beq.n	80038b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038aa:	2302      	movs	r3, #2
 80038ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038ae:	e13d      	b.n	8003b2c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <HAL_SPI_Transmit+0x52>
 80038b6:	88fb      	ldrh	r3, [r7, #6]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d102      	bne.n	80038c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038c0:	e134      	b.n	8003b2c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2203      	movs	r2, #3
 80038c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	88fa      	ldrh	r2, [r7, #6]
 80038da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	88fa      	ldrh	r2, [r7, #6]
 80038e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800390c:	d10f      	bne.n	800392e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800391c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800392c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003938:	2b40      	cmp	r3, #64	; 0x40
 800393a:	d007      	beq.n	800394c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800394a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003954:	d94b      	bls.n	80039ee <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <HAL_SPI_Transmit+0xfa>
 800395e:	8afb      	ldrh	r3, [r7, #22]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d13e      	bne.n	80039e2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003968:	881a      	ldrh	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	1c9a      	adds	r2, r3, #2
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003988:	e02b      	b.n	80039e2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b02      	cmp	r3, #2
 8003996:	d112      	bne.n	80039be <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399c:	881a      	ldrh	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a8:	1c9a      	adds	r2, r3, #2
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039bc:	e011      	b.n	80039e2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039be:	f7fd fcc7 	bl	8001350 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d803      	bhi.n	80039d6 <HAL_SPI_Transmit+0x16c>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039d4:	d102      	bne.n	80039dc <HAL_SPI_Transmit+0x172>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d102      	bne.n	80039e2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039e0:	e0a4      	b.n	8003b2c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1ce      	bne.n	800398a <HAL_SPI_Transmit+0x120>
 80039ec:	e07c      	b.n	8003ae8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <HAL_SPI_Transmit+0x192>
 80039f6:	8afb      	ldrh	r3, [r7, #22]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d170      	bne.n	8003ade <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d912      	bls.n	8003a2c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0a:	881a      	ldrh	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	1c9a      	adds	r2, r3, #2
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	3b02      	subs	r3, #2
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a2a:	e058      	b.n	8003ade <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	330c      	adds	r3, #12
 8003a36:	7812      	ldrb	r2, [r2, #0]
 8003a38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003a52:	e044      	b.n	8003ade <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d12b      	bne.n	8003aba <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d912      	bls.n	8003a92 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a70:	881a      	ldrh	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7c:	1c9a      	adds	r2, r3, #2
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b02      	subs	r3, #2
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a90:	e025      	b.n	8003ade <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	330c      	adds	r3, #12
 8003a9c:	7812      	ldrb	r2, [r2, #0]
 8003a9e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ab8:	e011      	b.n	8003ade <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aba:	f7fd fc49 	bl	8001350 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d803      	bhi.n	8003ad2 <HAL_SPI_Transmit+0x268>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ad0:	d102      	bne.n	8003ad8 <HAL_SPI_Transmit+0x26e>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d102      	bne.n	8003ade <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003adc:	e026      	b.n	8003b2c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1b5      	bne.n	8003a54 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	6839      	ldr	r1, [r7, #0]
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 fce3 	bl	80044b8 <SPI_EndRxTxTransaction>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2220      	movs	r2, #32
 8003afc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10a      	bne.n	8003b1c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b06:	2300      	movs	r3, #0
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	613b      	str	r3, [r7, #16]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	77fb      	strb	r3, [r7, #31]
 8003b28:	e000      	b.n	8003b2c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003b2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3720      	adds	r7, #32
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b088      	sub	sp, #32
 8003b4a:	af02      	add	r7, sp, #8
 8003b4c:	60f8      	str	r0, [r7, #12]
 8003b4e:	60b9      	str	r1, [r7, #8]
 8003b50:	603b      	str	r3, [r7, #0]
 8003b52:	4613      	mov	r3, r2
 8003b54:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b62:	d112      	bne.n	8003b8a <HAL_SPI_Receive+0x44>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10e      	bne.n	8003b8a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2204      	movs	r2, #4
 8003b70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b74:	88fa      	ldrh	r2, [r7, #6]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	68b9      	ldr	r1, [r7, #8]
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 f910 	bl	8003da6 <HAL_SPI_TransmitReceive>
 8003b86:	4603      	mov	r3, r0
 8003b88:	e109      	b.n	8003d9e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_SPI_Receive+0x52>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e102      	b.n	8003d9e <HAL_SPI_Receive+0x258>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ba0:	f7fd fbd6 	bl	8001350 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d002      	beq.n	8003bb8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003bb6:	e0e9      	b.n	8003d8c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <HAL_SPI_Receive+0x7e>
 8003bbe:	88fb      	ldrh	r3, [r7, #6]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d102      	bne.n	8003bca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003bc8:	e0e0      	b.n	8003d8c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2204      	movs	r2, #4
 8003bce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	88fa      	ldrh	r2, [r7, #6]
 8003be2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	88fa      	ldrh	r2, [r7, #6]
 8003bea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c14:	d908      	bls.n	8003c28 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c24:	605a      	str	r2, [r3, #4]
 8003c26:	e007      	b.n	8003c38 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c36:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c40:	d10f      	bne.n	8003c62 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c60:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6c:	2b40      	cmp	r3, #64	; 0x40
 8003c6e:	d007      	beq.n	8003c80 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c7e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c88:	d867      	bhi.n	8003d5a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c8a:	e030      	b.n	8003cee <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d117      	bne.n	8003cca <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f103 020c 	add.w	r2, r3, #12
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	7812      	ldrb	r2, [r2, #0]
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003cc8:	e011      	b.n	8003cee <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cca:	f7fd fb41 	bl	8001350 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d803      	bhi.n	8003ce2 <HAL_SPI_Receive+0x19c>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ce0:	d102      	bne.n	8003ce8 <HAL_SPI_Receive+0x1a2>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d102      	bne.n	8003cee <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003cec:	e04e      	b.n	8003d8c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1c8      	bne.n	8003c8c <HAL_SPI_Receive+0x146>
 8003cfa:	e034      	b.n	8003d66 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d115      	bne.n	8003d36 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	b292      	uxth	r2, r2
 8003d16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	1c9a      	adds	r2, r3, #2
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003d34:	e011      	b.n	8003d5a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d36:	f7fd fb0b 	bl	8001350 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d803      	bhi.n	8003d4e <HAL_SPI_Receive+0x208>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d4c:	d102      	bne.n	8003d54 <HAL_SPI_Receive+0x20e>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d102      	bne.n	8003d5a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d58:	e018      	b.n	8003d8c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1ca      	bne.n	8003cfc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	6839      	ldr	r1, [r7, #0]
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 fb4c 	bl	8004408 <SPI_EndRxTransaction>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	75fb      	strb	r3, [r7, #23]
 8003d88:	e000      	b.n	8003d8c <HAL_SPI_Receive+0x246>
  }

error :
 8003d8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b08a      	sub	sp, #40	; 0x28
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	607a      	str	r2, [r7, #4]
 8003db2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003db4:	2301      	movs	r3, #1
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d101      	bne.n	8003dcc <HAL_SPI_TransmitReceive+0x26>
 8003dc8:	2302      	movs	r3, #2
 8003dca:	e1fb      	b.n	80041c4 <HAL_SPI_TransmitReceive+0x41e>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dd4:	f7fd fabc 	bl	8001350 <HAL_GetTick>
 8003dd8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003de0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003de8:	887b      	ldrh	r3, [r7, #2]
 8003dea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003dec:	887b      	ldrh	r3, [r7, #2]
 8003dee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003df0:	7efb      	ldrb	r3, [r7, #27]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d00e      	beq.n	8003e14 <HAL_SPI_TransmitReceive+0x6e>
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dfc:	d106      	bne.n	8003e0c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d102      	bne.n	8003e0c <HAL_SPI_TransmitReceive+0x66>
 8003e06:	7efb      	ldrb	r3, [r7, #27]
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d003      	beq.n	8003e14 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003e12:	e1cd      	b.n	80041b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d005      	beq.n	8003e26 <HAL_SPI_TransmitReceive+0x80>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <HAL_SPI_TransmitReceive+0x80>
 8003e20:	887b      	ldrh	r3, [r7, #2]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d103      	bne.n	8003e2e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003e2c:	e1c0      	b.n	80041b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d003      	beq.n	8003e42 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2205      	movs	r2, #5
 8003e3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	887a      	ldrh	r2, [r7, #2]
 8003e52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	887a      	ldrh	r2, [r7, #2]
 8003e5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	887a      	ldrh	r2, [r7, #2]
 8003e68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	887a      	ldrh	r2, [r7, #2]
 8003e6e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e84:	d802      	bhi.n	8003e8c <HAL_SPI_TransmitReceive+0xe6>
 8003e86:	8a3b      	ldrh	r3, [r7, #16]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d908      	bls.n	8003e9e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e9a:	605a      	str	r2, [r3, #4]
 8003e9c:	e007      	b.n	8003eae <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003eac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb8:	2b40      	cmp	r3, #64	; 0x40
 8003eba:	d007      	beq.n	8003ecc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ed4:	d97c      	bls.n	8003fd0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <HAL_SPI_TransmitReceive+0x13e>
 8003ede:	8a7b      	ldrh	r3, [r7, #18]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d169      	bne.n	8003fb8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee8:	881a      	ldrh	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef4:	1c9a      	adds	r2, r3, #2
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f08:	e056      	b.n	8003fb8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d11b      	bne.n	8003f50 <HAL_SPI_TransmitReceive+0x1aa>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d016      	beq.n	8003f50 <HAL_SPI_TransmitReceive+0x1aa>
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d113      	bne.n	8003f50 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2c:	881a      	ldrh	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f38:	1c9a      	adds	r2, r3, #2
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d11c      	bne.n	8003f98 <HAL_SPI_TransmitReceive+0x1f2>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d016      	beq.n	8003f98 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	b292      	uxth	r2, r2
 8003f76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	1c9a      	adds	r2, r3, #2
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f94:	2301      	movs	r3, #1
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f98:	f7fd f9da 	bl	8001350 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d807      	bhi.n	8003fb8 <HAL_SPI_TransmitReceive+0x212>
 8003fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003faa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fae:	d003      	beq.n	8003fb8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003fb6:	e0fb      	b.n	80041b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1a3      	bne.n	8003f0a <HAL_SPI_TransmitReceive+0x164>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d19d      	bne.n	8003f0a <HAL_SPI_TransmitReceive+0x164>
 8003fce:	e0df      	b.n	8004190 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_SPI_TransmitReceive+0x23a>
 8003fd8:	8a7b      	ldrh	r3, [r7, #18]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	f040 80cb 	bne.w	8004176 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d912      	bls.n	8004010 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fee:	881a      	ldrh	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffa:	1c9a      	adds	r2, r3, #2
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004004:	b29b      	uxth	r3, r3
 8004006:	3b02      	subs	r3, #2
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800400e:	e0b2      	b.n	8004176 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	330c      	adds	r3, #12
 800401a:	7812      	ldrb	r2, [r2, #0]
 800401c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004022:	1c5a      	adds	r2, r3, #1
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800402c:	b29b      	uxth	r3, r3
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004036:	e09e      	b.n	8004176 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b02      	cmp	r3, #2
 8004044:	d134      	bne.n	80040b0 <HAL_SPI_TransmitReceive+0x30a>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800404a:	b29b      	uxth	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d02f      	beq.n	80040b0 <HAL_SPI_TransmitReceive+0x30a>
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	2b01      	cmp	r3, #1
 8004054:	d12c      	bne.n	80040b0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800405a:	b29b      	uxth	r3, r3
 800405c:	2b01      	cmp	r3, #1
 800405e:	d912      	bls.n	8004086 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004064:	881a      	ldrh	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004070:	1c9a      	adds	r2, r3, #2
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800407a:	b29b      	uxth	r3, r3
 800407c:	3b02      	subs	r3, #2
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004084:	e012      	b.n	80040ac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	330c      	adds	r3, #12
 8004090:	7812      	ldrb	r2, [r2, #0]
 8004092:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d148      	bne.n	8004150 <HAL_SPI_TransmitReceive+0x3aa>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d042      	beq.n	8004150 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d923      	bls.n	800411e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e0:	b292      	uxth	r2, r2
 80040e2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	1c9a      	adds	r2, r3, #2
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b02      	subs	r3, #2
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b01      	cmp	r3, #1
 800410a:	d81f      	bhi.n	800414c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800411a:	605a      	str	r2, [r3, #4]
 800411c:	e016      	b.n	800414c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f103 020c 	add.w	r2, r3, #12
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	7812      	ldrb	r2, [r2, #0]
 800412c:	b2d2      	uxtb	r2, r2
 800412e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800414c:	2301      	movs	r3, #1
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004150:	f7fd f8fe 	bl	8001350 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800415c:	429a      	cmp	r2, r3
 800415e:	d803      	bhi.n	8004168 <HAL_SPI_TransmitReceive+0x3c2>
 8004160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004166:	d102      	bne.n	800416e <HAL_SPI_TransmitReceive+0x3c8>
 8004168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416a:	2b00      	cmp	r3, #0
 800416c:	d103      	bne.n	8004176 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004174:	e01c      	b.n	80041b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800417a:	b29b      	uxth	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	f47f af5b 	bne.w	8004038 <HAL_SPI_TransmitReceive+0x292>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	f47f af54 	bne.w	8004038 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004190:	69fa      	ldr	r2, [r7, #28]
 8004192:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f98f 	bl	80044b8 <SPI_EndRxTxTransaction>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d006      	beq.n	80041ae <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2220      	movs	r2, #32
 80041aa:	661a      	str	r2, [r3, #96]	; 0x60
 80041ac:	e000      	b.n	80041b0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80041ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80041c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3728      	adds	r7, #40	; 0x28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	603b      	str	r3, [r7, #0]
 80041d8:	4613      	mov	r3, r2
 80041da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041dc:	f7fd f8b8 	bl	8001350 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e4:	1a9b      	subs	r3, r3, r2
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	4413      	add	r3, r2
 80041ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041ec:	f7fd f8b0 	bl	8001350 <HAL_GetTick>
 80041f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041f2:	4b39      	ldr	r3, [pc, #228]	; (80042d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	015b      	lsls	r3, r3, #5
 80041f8:	0d1b      	lsrs	r3, r3, #20
 80041fa:	69fa      	ldr	r2, [r7, #28]
 80041fc:	fb02 f303 	mul.w	r3, r2, r3
 8004200:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004202:	e054      	b.n	80042ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800420a:	d050      	beq.n	80042ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800420c:	f7fd f8a0 	bl	8001350 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	69fa      	ldr	r2, [r7, #28]
 8004218:	429a      	cmp	r2, r3
 800421a:	d902      	bls.n	8004222 <SPI_WaitFlagStateUntilTimeout+0x56>
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d13d      	bne.n	800429e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004230:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800423a:	d111      	bne.n	8004260 <SPI_WaitFlagStateUntilTimeout+0x94>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004244:	d004      	beq.n	8004250 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800424e:	d107      	bne.n	8004260 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800425e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004264:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004268:	d10f      	bne.n	800428a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004288:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e017      	b.n	80042ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	4013      	ands	r3, r2
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	bf0c      	ite	eq
 80042be:	2301      	moveq	r3, #1
 80042c0:	2300      	movne	r3, #0
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	461a      	mov	r2, r3
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d19b      	bne.n	8004204 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3720      	adds	r7, #32
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20000000 	.word	0x20000000

080042dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08a      	sub	sp, #40	; 0x28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80042ea:	2300      	movs	r3, #0
 80042ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80042ee:	f7fd f82f 	bl	8001350 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f6:	1a9b      	subs	r3, r3, r2
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	4413      	add	r3, r2
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80042fe:	f7fd f827 	bl	8001350 <HAL_GetTick>
 8004302:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	330c      	adds	r3, #12
 800430a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800430c:	4b3d      	ldr	r3, [pc, #244]	; (8004404 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	4613      	mov	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	00da      	lsls	r2, r3, #3
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	0d1b      	lsrs	r3, r3, #20
 800431c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800431e:	fb02 f303 	mul.w	r3, r2, r3
 8004322:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004324:	e060      	b.n	80043e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800432c:	d107      	bne.n	800433e <SPI_WaitFifoStateUntilTimeout+0x62>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d104      	bne.n	800433e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800433c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004344:	d050      	beq.n	80043e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004346:	f7fd f803 	bl	8001350 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004352:	429a      	cmp	r2, r3
 8004354:	d902      	bls.n	800435c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	2b00      	cmp	r3, #0
 800435a:	d13d      	bne.n	80043d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800436a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004374:	d111      	bne.n	800439a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800437e:	d004      	beq.n	800438a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004388:	d107      	bne.n	800439a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004398:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a2:	d10f      	bne.n	80043c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e010      	b.n	80043fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	3b01      	subs	r3, #1
 80043e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	4013      	ands	r3, r2
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d196      	bne.n	8004326 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3728      	adds	r7, #40	; 0x28
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	20000000 	.word	0x20000000

08004408 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af02      	add	r7, sp, #8
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800441c:	d111      	bne.n	8004442 <SPI_EndRxTransaction+0x3a>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004426:	d004      	beq.n	8004432 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004430:	d107      	bne.n	8004442 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004440:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2200      	movs	r2, #0
 800444a:	2180      	movs	r1, #128	; 0x80
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f7ff febd 	bl	80041cc <SPI_WaitFlagStateUntilTimeout>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d007      	beq.n	8004468 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800445c:	f043 0220 	orr.w	r2, r3, #32
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e023      	b.n	80044b0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004470:	d11d      	bne.n	80044ae <SPI_EndRxTransaction+0xa6>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800447a:	d004      	beq.n	8004486 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004484:	d113      	bne.n	80044ae <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2200      	movs	r2, #0
 800448e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f7ff ff22 	bl	80042dc <SPI_WaitFifoStateUntilTimeout>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d007      	beq.n	80044ae <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a2:	f043 0220 	orr.w	r2, r3, #32
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e000      	b.n	80044b0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af02      	add	r7, sp, #8
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f7ff ff03 	bl	80042dc <SPI_WaitFifoStateUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d007      	beq.n	80044ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e0:	f043 0220 	orr.w	r2, r3, #32
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e027      	b.n	800453c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2200      	movs	r2, #0
 80044f4:	2180      	movs	r1, #128	; 0x80
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f7ff fe68 	bl	80041cc <SPI_WaitFlagStateUntilTimeout>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d007      	beq.n	8004512 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004506:	f043 0220 	orr.w	r2, r3, #32
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e014      	b.n	800453c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2200      	movs	r2, #0
 800451a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f7ff fedc 	bl	80042dc <SPI_WaitFifoStateUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d007      	beq.n	800453a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800452e:	f043 0220 	orr.w	r2, r3, #32
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e000      	b.n	800453c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e040      	b.n	80045d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800455a:	2b00      	cmp	r3, #0
 800455c:	d106      	bne.n	800456c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fc fd70 	bl	800104c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2224      	movs	r2, #36	; 0x24
 8004570:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0201 	bic.w	r2, r2, #1
 8004580:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f8c0 	bl	8004708 <UART_SetConfig>
 8004588:	4603      	mov	r3, r0
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e022      	b.n	80045d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	2b00      	cmp	r3, #0
 8004598:	d002      	beq.n	80045a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 fae0 	bl	8004b60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0201 	orr.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 fb67 	bl	8004ca4 <UART_CheckIdleState>
 80045d6:	4603      	mov	r3, r0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3708      	adds	r7, #8
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08a      	sub	sp, #40	; 0x28
 80045e4:	af02      	add	r7, sp, #8
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	4613      	mov	r3, r2
 80045ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	f040 8082 	bne.w	80046fe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <HAL_UART_Transmit+0x26>
 8004600:	88fb      	ldrh	r3, [r7, #6]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e07a      	b.n	8004700 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <HAL_UART_Transmit+0x38>
 8004614:	2302      	movs	r3, #2
 8004616:	e073      	b.n	8004700 <HAL_UART_Transmit+0x120>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2221      	movs	r2, #33	; 0x21
 800462c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800462e:	f7fc fe8f 	bl	8001350 <HAL_GetTick>
 8004632:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	88fa      	ldrh	r2, [r7, #6]
 8004638:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	88fa      	ldrh	r2, [r7, #6]
 8004640:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800464c:	d108      	bne.n	8004660 <HAL_UART_Transmit+0x80>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d104      	bne.n	8004660 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004656:	2300      	movs	r3, #0
 8004658:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	61bb      	str	r3, [r7, #24]
 800465e:	e003      	b.n	8004668 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004664:	2300      	movs	r3, #0
 8004666:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004670:	e02d      	b.n	80046ce <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2200      	movs	r2, #0
 800467a:	2180      	movs	r1, #128	; 0x80
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 fb5a 	bl	8004d36 <UART_WaitOnFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e039      	b.n	8004700 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10b      	bne.n	80046aa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	881a      	ldrh	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800469e:	b292      	uxth	r2, r2
 80046a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	3302      	adds	r3, #2
 80046a6:	61bb      	str	r3, [r7, #24]
 80046a8:	e008      	b.n	80046bc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	781a      	ldrb	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	b292      	uxth	r2, r2
 80046b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	3301      	adds	r3, #1
 80046ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1cb      	bne.n	8004672 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2200      	movs	r2, #0
 80046e2:	2140      	movs	r1, #64	; 0x40
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 fb26 	bl	8004d36 <UART_WaitOnFlagUntilTimeout>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e005      	b.n	8004700 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2220      	movs	r2, #32
 80046f8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80046fa:	2300      	movs	r3, #0
 80046fc:	e000      	b.n	8004700 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80046fe:	2302      	movs	r3, #2
  }
}
 8004700:	4618      	mov	r0, r3
 8004702:	3720      	adds	r7, #32
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800470c:	b08a      	sub	sp, #40	; 0x28
 800470e:	af00      	add	r7, sp, #0
 8004710:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	431a      	orrs	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	431a      	orrs	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	4313      	orrs	r3, r2
 800472e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	4bb4      	ldr	r3, [pc, #720]	; (8004a08 <UART_SetConfig+0x300>)
 8004738:	4013      	ands	r3, r2
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004740:	430b      	orrs	r3, r1
 8004742:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4aa9      	ldr	r2, [pc, #676]	; (8004a0c <UART_SetConfig+0x304>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d004      	beq.n	8004774 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004770:	4313      	orrs	r3, r2
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004784:	430a      	orrs	r2, r1
 8004786:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4aa0      	ldr	r2, [pc, #640]	; (8004a10 <UART_SetConfig+0x308>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d126      	bne.n	80047e0 <UART_SetConfig+0xd8>
 8004792:	4ba0      	ldr	r3, [pc, #640]	; (8004a14 <UART_SetConfig+0x30c>)
 8004794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004798:	f003 0303 	and.w	r3, r3, #3
 800479c:	2b03      	cmp	r3, #3
 800479e:	d81b      	bhi.n	80047d8 <UART_SetConfig+0xd0>
 80047a0:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <UART_SetConfig+0xa0>)
 80047a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a6:	bf00      	nop
 80047a8:	080047b9 	.word	0x080047b9
 80047ac:	080047c9 	.word	0x080047c9
 80047b0:	080047c1 	.word	0x080047c1
 80047b4:	080047d1 	.word	0x080047d1
 80047b8:	2301      	movs	r3, #1
 80047ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047be:	e080      	b.n	80048c2 <UART_SetConfig+0x1ba>
 80047c0:	2302      	movs	r3, #2
 80047c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047c6:	e07c      	b.n	80048c2 <UART_SetConfig+0x1ba>
 80047c8:	2304      	movs	r3, #4
 80047ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ce:	e078      	b.n	80048c2 <UART_SetConfig+0x1ba>
 80047d0:	2308      	movs	r3, #8
 80047d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047d6:	e074      	b.n	80048c2 <UART_SetConfig+0x1ba>
 80047d8:	2310      	movs	r3, #16
 80047da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047de:	e070      	b.n	80048c2 <UART_SetConfig+0x1ba>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a8c      	ldr	r2, [pc, #560]	; (8004a18 <UART_SetConfig+0x310>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d138      	bne.n	800485c <UART_SetConfig+0x154>
 80047ea:	4b8a      	ldr	r3, [pc, #552]	; (8004a14 <UART_SetConfig+0x30c>)
 80047ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f0:	f003 030c 	and.w	r3, r3, #12
 80047f4:	2b0c      	cmp	r3, #12
 80047f6:	d82d      	bhi.n	8004854 <UART_SetConfig+0x14c>
 80047f8:	a201      	add	r2, pc, #4	; (adr r2, 8004800 <UART_SetConfig+0xf8>)
 80047fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fe:	bf00      	nop
 8004800:	08004835 	.word	0x08004835
 8004804:	08004855 	.word	0x08004855
 8004808:	08004855 	.word	0x08004855
 800480c:	08004855 	.word	0x08004855
 8004810:	08004845 	.word	0x08004845
 8004814:	08004855 	.word	0x08004855
 8004818:	08004855 	.word	0x08004855
 800481c:	08004855 	.word	0x08004855
 8004820:	0800483d 	.word	0x0800483d
 8004824:	08004855 	.word	0x08004855
 8004828:	08004855 	.word	0x08004855
 800482c:	08004855 	.word	0x08004855
 8004830:	0800484d 	.word	0x0800484d
 8004834:	2300      	movs	r3, #0
 8004836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800483a:	e042      	b.n	80048c2 <UART_SetConfig+0x1ba>
 800483c:	2302      	movs	r3, #2
 800483e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004842:	e03e      	b.n	80048c2 <UART_SetConfig+0x1ba>
 8004844:	2304      	movs	r3, #4
 8004846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484a:	e03a      	b.n	80048c2 <UART_SetConfig+0x1ba>
 800484c:	2308      	movs	r3, #8
 800484e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004852:	e036      	b.n	80048c2 <UART_SetConfig+0x1ba>
 8004854:	2310      	movs	r3, #16
 8004856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800485a:	e032      	b.n	80048c2 <UART_SetConfig+0x1ba>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a6a      	ldr	r2, [pc, #424]	; (8004a0c <UART_SetConfig+0x304>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d12a      	bne.n	80048bc <UART_SetConfig+0x1b4>
 8004866:	4b6b      	ldr	r3, [pc, #428]	; (8004a14 <UART_SetConfig+0x30c>)
 8004868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004870:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004874:	d01a      	beq.n	80048ac <UART_SetConfig+0x1a4>
 8004876:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800487a:	d81b      	bhi.n	80048b4 <UART_SetConfig+0x1ac>
 800487c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004880:	d00c      	beq.n	800489c <UART_SetConfig+0x194>
 8004882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004886:	d815      	bhi.n	80048b4 <UART_SetConfig+0x1ac>
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <UART_SetConfig+0x18c>
 800488c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004890:	d008      	beq.n	80048a4 <UART_SetConfig+0x19c>
 8004892:	e00f      	b.n	80048b4 <UART_SetConfig+0x1ac>
 8004894:	2300      	movs	r3, #0
 8004896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800489a:	e012      	b.n	80048c2 <UART_SetConfig+0x1ba>
 800489c:	2302      	movs	r3, #2
 800489e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048a2:	e00e      	b.n	80048c2 <UART_SetConfig+0x1ba>
 80048a4:	2304      	movs	r3, #4
 80048a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048aa:	e00a      	b.n	80048c2 <UART_SetConfig+0x1ba>
 80048ac:	2308      	movs	r3, #8
 80048ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048b2:	e006      	b.n	80048c2 <UART_SetConfig+0x1ba>
 80048b4:	2310      	movs	r3, #16
 80048b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ba:	e002      	b.n	80048c2 <UART_SetConfig+0x1ba>
 80048bc:	2310      	movs	r3, #16
 80048be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a51      	ldr	r2, [pc, #324]	; (8004a0c <UART_SetConfig+0x304>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d17a      	bne.n	80049c2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d824      	bhi.n	800491e <UART_SetConfig+0x216>
 80048d4:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <UART_SetConfig+0x1d4>)
 80048d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048da:	bf00      	nop
 80048dc:	08004901 	.word	0x08004901
 80048e0:	0800491f 	.word	0x0800491f
 80048e4:	08004909 	.word	0x08004909
 80048e8:	0800491f 	.word	0x0800491f
 80048ec:	0800490f 	.word	0x0800490f
 80048f0:	0800491f 	.word	0x0800491f
 80048f4:	0800491f 	.word	0x0800491f
 80048f8:	0800491f 	.word	0x0800491f
 80048fc:	08004917 	.word	0x08004917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004900:	f7fe fb8c 	bl	800301c <HAL_RCC_GetPCLK1Freq>
 8004904:	61f8      	str	r0, [r7, #28]
        break;
 8004906:	e010      	b.n	800492a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004908:	4b44      	ldr	r3, [pc, #272]	; (8004a1c <UART_SetConfig+0x314>)
 800490a:	61fb      	str	r3, [r7, #28]
        break;
 800490c:	e00d      	b.n	800492a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800490e:	f7fe faed 	bl	8002eec <HAL_RCC_GetSysClockFreq>
 8004912:	61f8      	str	r0, [r7, #28]
        break;
 8004914:	e009      	b.n	800492a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800491a:	61fb      	str	r3, [r7, #28]
        break;
 800491c:	e005      	b.n	800492a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004928:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 8107 	beq.w	8004b40 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	4613      	mov	r3, r2
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	4413      	add	r3, r2
 800493c:	69fa      	ldr	r2, [r7, #28]
 800493e:	429a      	cmp	r2, r3
 8004940:	d305      	bcc.n	800494e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004948:	69fa      	ldr	r2, [r7, #28]
 800494a:	429a      	cmp	r2, r3
 800494c:	d903      	bls.n	8004956 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004954:	e0f4      	b.n	8004b40 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	2200      	movs	r2, #0
 800495a:	461c      	mov	r4, r3
 800495c:	4615      	mov	r5, r2
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	022b      	lsls	r3, r5, #8
 8004968:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800496c:	0222      	lsls	r2, r4, #8
 800496e:	68f9      	ldr	r1, [r7, #12]
 8004970:	6849      	ldr	r1, [r1, #4]
 8004972:	0849      	lsrs	r1, r1, #1
 8004974:	2000      	movs	r0, #0
 8004976:	4688      	mov	r8, r1
 8004978:	4681      	mov	r9, r0
 800497a:	eb12 0a08 	adds.w	sl, r2, r8
 800497e:	eb43 0b09 	adc.w	fp, r3, r9
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	603b      	str	r3, [r7, #0]
 800498a:	607a      	str	r2, [r7, #4]
 800498c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004990:	4650      	mov	r0, sl
 8004992:	4659      	mov	r1, fp
 8004994:	f7fb fc1a 	bl	80001cc <__aeabi_uldivmod>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4613      	mov	r3, r2
 800499e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049a6:	d308      	bcc.n	80049ba <UART_SetConfig+0x2b2>
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049ae:	d204      	bcs.n	80049ba <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	60da      	str	r2, [r3, #12]
 80049b8:	e0c2      	b.n	8004b40 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049c0:	e0be      	b.n	8004b40 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ca:	d16a      	bne.n	8004aa2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80049cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d834      	bhi.n	8004a3e <UART_SetConfig+0x336>
 80049d4:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <UART_SetConfig+0x2d4>)
 80049d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049da:	bf00      	nop
 80049dc:	08004a01 	.word	0x08004a01
 80049e0:	08004a21 	.word	0x08004a21
 80049e4:	08004a29 	.word	0x08004a29
 80049e8:	08004a3f 	.word	0x08004a3f
 80049ec:	08004a2f 	.word	0x08004a2f
 80049f0:	08004a3f 	.word	0x08004a3f
 80049f4:	08004a3f 	.word	0x08004a3f
 80049f8:	08004a3f 	.word	0x08004a3f
 80049fc:	08004a37 	.word	0x08004a37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a00:	f7fe fb0c 	bl	800301c <HAL_RCC_GetPCLK1Freq>
 8004a04:	61f8      	str	r0, [r7, #28]
        break;
 8004a06:	e020      	b.n	8004a4a <UART_SetConfig+0x342>
 8004a08:	efff69f3 	.word	0xefff69f3
 8004a0c:	40008000 	.word	0x40008000
 8004a10:	40013800 	.word	0x40013800
 8004a14:	40021000 	.word	0x40021000
 8004a18:	40004400 	.word	0x40004400
 8004a1c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a20:	f7fe fb12 	bl	8003048 <HAL_RCC_GetPCLK2Freq>
 8004a24:	61f8      	str	r0, [r7, #28]
        break;
 8004a26:	e010      	b.n	8004a4a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a28:	4b4c      	ldr	r3, [pc, #304]	; (8004b5c <UART_SetConfig+0x454>)
 8004a2a:	61fb      	str	r3, [r7, #28]
        break;
 8004a2c:	e00d      	b.n	8004a4a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a2e:	f7fe fa5d 	bl	8002eec <HAL_RCC_GetSysClockFreq>
 8004a32:	61f8      	str	r0, [r7, #28]
        break;
 8004a34:	e009      	b.n	8004a4a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a3a:	61fb      	str	r3, [r7, #28]
        break;
 8004a3c:	e005      	b.n	8004a4a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d077      	beq.n	8004b40 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	005a      	lsls	r2, r3, #1
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	085b      	lsrs	r3, r3, #1
 8004a5a:	441a      	add	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a64:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	2b0f      	cmp	r3, #15
 8004a6a:	d916      	bls.n	8004a9a <UART_SetConfig+0x392>
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a72:	d212      	bcs.n	8004a9a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	f023 030f 	bic.w	r3, r3, #15
 8004a7c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	8afb      	ldrh	r3, [r7, #22]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	8afa      	ldrh	r2, [r7, #22]
 8004a96:	60da      	str	r2, [r3, #12]
 8004a98:	e052      	b.n	8004b40 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004aa0:	e04e      	b.n	8004b40 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004aa2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004aa6:	2b08      	cmp	r3, #8
 8004aa8:	d827      	bhi.n	8004afa <UART_SetConfig+0x3f2>
 8004aaa:	a201      	add	r2, pc, #4	; (adr r2, 8004ab0 <UART_SetConfig+0x3a8>)
 8004aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab0:	08004ad5 	.word	0x08004ad5
 8004ab4:	08004add 	.word	0x08004add
 8004ab8:	08004ae5 	.word	0x08004ae5
 8004abc:	08004afb 	.word	0x08004afb
 8004ac0:	08004aeb 	.word	0x08004aeb
 8004ac4:	08004afb 	.word	0x08004afb
 8004ac8:	08004afb 	.word	0x08004afb
 8004acc:	08004afb 	.word	0x08004afb
 8004ad0:	08004af3 	.word	0x08004af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ad4:	f7fe faa2 	bl	800301c <HAL_RCC_GetPCLK1Freq>
 8004ad8:	61f8      	str	r0, [r7, #28]
        break;
 8004ada:	e014      	b.n	8004b06 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004adc:	f7fe fab4 	bl	8003048 <HAL_RCC_GetPCLK2Freq>
 8004ae0:	61f8      	str	r0, [r7, #28]
        break;
 8004ae2:	e010      	b.n	8004b06 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ae4:	4b1d      	ldr	r3, [pc, #116]	; (8004b5c <UART_SetConfig+0x454>)
 8004ae6:	61fb      	str	r3, [r7, #28]
        break;
 8004ae8:	e00d      	b.n	8004b06 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aea:	f7fe f9ff 	bl	8002eec <HAL_RCC_GetSysClockFreq>
 8004aee:	61f8      	str	r0, [r7, #28]
        break;
 8004af0:	e009      	b.n	8004b06 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004af6:	61fb      	str	r3, [r7, #28]
        break;
 8004af8:	e005      	b.n	8004b06 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b04:	bf00      	nop
    }

    if (pclk != 0U)
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d019      	beq.n	8004b40 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	085a      	lsrs	r2, r3, #1
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	441a      	add	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	2b0f      	cmp	r3, #15
 8004b24:	d909      	bls.n	8004b3a <UART_SetConfig+0x432>
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b2c:	d205      	bcs.n	8004b3a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	60da      	str	r2, [r3, #12]
 8004b38:	e002      	b.n	8004b40 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b4c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3728      	adds	r7, #40	; 0x28
 8004b54:	46bd      	mov	sp, r7
 8004b56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b5a:	bf00      	nop
 8004b5c:	00f42400 	.word	0x00f42400

08004b60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00a      	beq.n	8004bce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	f003 0308 	and.w	r3, r3, #8
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	f003 0310 	and.w	r3, r3, #16
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	f003 0320 	and.w	r3, r3, #32
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01a      	beq.n	8004c76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c5e:	d10a      	bne.n	8004c76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	605a      	str	r2, [r3, #4]
  }
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cb4:	f7fc fb4c 	bl	8001350 <HAL_GetTick>
 8004cb8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0308 	and.w	r3, r3, #8
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d10e      	bne.n	8004ce6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f82d 	bl	8004d36 <UART_WaitOnFlagUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e023      	b.n	8004d2e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	d10e      	bne.n	8004d12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f817 	bl	8004d36 <UART_WaitOnFlagUntilTimeout>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e00d      	b.n	8004d2e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2220      	movs	r2, #32
 8004d16:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b09c      	sub	sp, #112	; 0x70
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	60f8      	str	r0, [r7, #12]
 8004d3e:	60b9      	str	r1, [r7, #8]
 8004d40:	603b      	str	r3, [r7, #0]
 8004d42:	4613      	mov	r3, r2
 8004d44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d46:	e0a5      	b.n	8004e94 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d4e:	f000 80a1 	beq.w	8004e94 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d52:	f7fc fafd 	bl	8001350 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d302      	bcc.n	8004d68 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d13e      	bne.n	8004de6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d7c:	667b      	str	r3, [r7, #100]	; 0x64
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d88:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d8e:	e841 2300 	strex	r3, r2, [r1]
 8004d92:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1e6      	bne.n	8004d68 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	3308      	adds	r3, #8
 8004da0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004da4:	e853 3f00 	ldrex	r3, [r3]
 8004da8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dac:	f023 0301 	bic.w	r3, r3, #1
 8004db0:	663b      	str	r3, [r7, #96]	; 0x60
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3308      	adds	r3, #8
 8004db8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004dba:	64ba      	str	r2, [r7, #72]	; 0x48
 8004dbc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004dc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dc2:	e841 2300 	strex	r3, r2, [r1]
 8004dc6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1e5      	bne.n	8004d9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e067      	b.n	8004eb6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d04f      	beq.n	8004e94 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e02:	d147      	bne.n	8004e94 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e0c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e16:	e853 3f00 	ldrex	r3, [r3]
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e34:	e841 2300 	strex	r3, r2, [r1]
 8004e38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1e6      	bne.n	8004e0e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3308      	adds	r3, #8
 8004e46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	e853 3f00 	ldrex	r3, [r3]
 8004e4e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f023 0301 	bic.w	r3, r3, #1
 8004e56:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	3308      	adds	r3, #8
 8004e5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e60:	623a      	str	r2, [r7, #32]
 8004e62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e64:	69f9      	ldr	r1, [r7, #28]
 8004e66:	6a3a      	ldr	r2, [r7, #32]
 8004e68:	e841 2300 	strex	r3, r2, [r1]
 8004e6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1e5      	bne.n	8004e40 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2220      	movs	r2, #32
 8004e78:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e010      	b.n	8004eb6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	69da      	ldr	r2, [r3, #28]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	bf0c      	ite	eq
 8004ea4:	2301      	moveq	r3, #1
 8004ea6:	2300      	movne	r3, #0
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	461a      	mov	r2, r3
 8004eac:	79fb      	ldrb	r3, [r7, #7]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	f43f af4a 	beq.w	8004d48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3770      	adds	r7, #112	; 0x70
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <__errno>:
 8004ec0:	4b01      	ldr	r3, [pc, #4]	; (8004ec8 <__errno+0x8>)
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	2000000c 	.word	0x2000000c

08004ecc <__libc_init_array>:
 8004ecc:	b570      	push	{r4, r5, r6, lr}
 8004ece:	4d0d      	ldr	r5, [pc, #52]	; (8004f04 <__libc_init_array+0x38>)
 8004ed0:	4c0d      	ldr	r4, [pc, #52]	; (8004f08 <__libc_init_array+0x3c>)
 8004ed2:	1b64      	subs	r4, r4, r5
 8004ed4:	10a4      	asrs	r4, r4, #2
 8004ed6:	2600      	movs	r6, #0
 8004ed8:	42a6      	cmp	r6, r4
 8004eda:	d109      	bne.n	8004ef0 <__libc_init_array+0x24>
 8004edc:	4d0b      	ldr	r5, [pc, #44]	; (8004f0c <__libc_init_array+0x40>)
 8004ede:	4c0c      	ldr	r4, [pc, #48]	; (8004f10 <__libc_init_array+0x44>)
 8004ee0:	f000 f8e8 	bl	80050b4 <_init>
 8004ee4:	1b64      	subs	r4, r4, r5
 8004ee6:	10a4      	asrs	r4, r4, #2
 8004ee8:	2600      	movs	r6, #0
 8004eea:	42a6      	cmp	r6, r4
 8004eec:	d105      	bne.n	8004efa <__libc_init_array+0x2e>
 8004eee:	bd70      	pop	{r4, r5, r6, pc}
 8004ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ef4:	4798      	blx	r3
 8004ef6:	3601      	adds	r6, #1
 8004ef8:	e7ee      	b.n	8004ed8 <__libc_init_array+0xc>
 8004efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004efe:	4798      	blx	r3
 8004f00:	3601      	adds	r6, #1
 8004f02:	e7f2      	b.n	8004eea <__libc_init_array+0x1e>
 8004f04:	08005bc8 	.word	0x08005bc8
 8004f08:	08005bc8 	.word	0x08005bc8
 8004f0c:	08005bc8 	.word	0x08005bc8
 8004f10:	08005bcc 	.word	0x08005bcc

08004f14 <malloc>:
 8004f14:	4b02      	ldr	r3, [pc, #8]	; (8004f20 <malloc+0xc>)
 8004f16:	4601      	mov	r1, r0
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	f000 b839 	b.w	8004f90 <_malloc_r>
 8004f1e:	bf00      	nop
 8004f20:	2000000c 	.word	0x2000000c

08004f24 <memcpy>:
 8004f24:	440a      	add	r2, r1
 8004f26:	4291      	cmp	r1, r2
 8004f28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004f2c:	d100      	bne.n	8004f30 <memcpy+0xc>
 8004f2e:	4770      	bx	lr
 8004f30:	b510      	push	{r4, lr}
 8004f32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f3a:	4291      	cmp	r1, r2
 8004f3c:	d1f9      	bne.n	8004f32 <memcpy+0xe>
 8004f3e:	bd10      	pop	{r4, pc}

08004f40 <memset>:
 8004f40:	4402      	add	r2, r0
 8004f42:	4603      	mov	r3, r0
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d100      	bne.n	8004f4a <memset+0xa>
 8004f48:	4770      	bx	lr
 8004f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f4e:	e7f9      	b.n	8004f44 <memset+0x4>

08004f50 <sbrk_aligned>:
 8004f50:	b570      	push	{r4, r5, r6, lr}
 8004f52:	4e0e      	ldr	r6, [pc, #56]	; (8004f8c <sbrk_aligned+0x3c>)
 8004f54:	460c      	mov	r4, r1
 8004f56:	6831      	ldr	r1, [r6, #0]
 8004f58:	4605      	mov	r5, r0
 8004f5a:	b911      	cbnz	r1, 8004f62 <sbrk_aligned+0x12>
 8004f5c:	f000 f88c 	bl	8005078 <_sbrk_r>
 8004f60:	6030      	str	r0, [r6, #0]
 8004f62:	4621      	mov	r1, r4
 8004f64:	4628      	mov	r0, r5
 8004f66:	f000 f887 	bl	8005078 <_sbrk_r>
 8004f6a:	1c43      	adds	r3, r0, #1
 8004f6c:	d00a      	beq.n	8004f84 <sbrk_aligned+0x34>
 8004f6e:	1cc4      	adds	r4, r0, #3
 8004f70:	f024 0403 	bic.w	r4, r4, #3
 8004f74:	42a0      	cmp	r0, r4
 8004f76:	d007      	beq.n	8004f88 <sbrk_aligned+0x38>
 8004f78:	1a21      	subs	r1, r4, r0
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	f000 f87c 	bl	8005078 <_sbrk_r>
 8004f80:	3001      	adds	r0, #1
 8004f82:	d101      	bne.n	8004f88 <sbrk_aligned+0x38>
 8004f84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004f88:	4620      	mov	r0, r4
 8004f8a:	bd70      	pop	{r4, r5, r6, pc}
 8004f8c:	20000264 	.word	0x20000264

08004f90 <_malloc_r>:
 8004f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f94:	1ccd      	adds	r5, r1, #3
 8004f96:	f025 0503 	bic.w	r5, r5, #3
 8004f9a:	3508      	adds	r5, #8
 8004f9c:	2d0c      	cmp	r5, #12
 8004f9e:	bf38      	it	cc
 8004fa0:	250c      	movcc	r5, #12
 8004fa2:	2d00      	cmp	r5, #0
 8004fa4:	4607      	mov	r7, r0
 8004fa6:	db01      	blt.n	8004fac <_malloc_r+0x1c>
 8004fa8:	42a9      	cmp	r1, r5
 8004faa:	d905      	bls.n	8004fb8 <_malloc_r+0x28>
 8004fac:	230c      	movs	r3, #12
 8004fae:	603b      	str	r3, [r7, #0]
 8004fb0:	2600      	movs	r6, #0
 8004fb2:	4630      	mov	r0, r6
 8004fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fb8:	4e2e      	ldr	r6, [pc, #184]	; (8005074 <_malloc_r+0xe4>)
 8004fba:	f000 f86d 	bl	8005098 <__malloc_lock>
 8004fbe:	6833      	ldr	r3, [r6, #0]
 8004fc0:	461c      	mov	r4, r3
 8004fc2:	bb34      	cbnz	r4, 8005012 <_malloc_r+0x82>
 8004fc4:	4629      	mov	r1, r5
 8004fc6:	4638      	mov	r0, r7
 8004fc8:	f7ff ffc2 	bl	8004f50 <sbrk_aligned>
 8004fcc:	1c43      	adds	r3, r0, #1
 8004fce:	4604      	mov	r4, r0
 8004fd0:	d14d      	bne.n	800506e <_malloc_r+0xde>
 8004fd2:	6834      	ldr	r4, [r6, #0]
 8004fd4:	4626      	mov	r6, r4
 8004fd6:	2e00      	cmp	r6, #0
 8004fd8:	d140      	bne.n	800505c <_malloc_r+0xcc>
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	4631      	mov	r1, r6
 8004fde:	4638      	mov	r0, r7
 8004fe0:	eb04 0803 	add.w	r8, r4, r3
 8004fe4:	f000 f848 	bl	8005078 <_sbrk_r>
 8004fe8:	4580      	cmp	r8, r0
 8004fea:	d13a      	bne.n	8005062 <_malloc_r+0xd2>
 8004fec:	6821      	ldr	r1, [r4, #0]
 8004fee:	3503      	adds	r5, #3
 8004ff0:	1a6d      	subs	r5, r5, r1
 8004ff2:	f025 0503 	bic.w	r5, r5, #3
 8004ff6:	3508      	adds	r5, #8
 8004ff8:	2d0c      	cmp	r5, #12
 8004ffa:	bf38      	it	cc
 8004ffc:	250c      	movcc	r5, #12
 8004ffe:	4629      	mov	r1, r5
 8005000:	4638      	mov	r0, r7
 8005002:	f7ff ffa5 	bl	8004f50 <sbrk_aligned>
 8005006:	3001      	adds	r0, #1
 8005008:	d02b      	beq.n	8005062 <_malloc_r+0xd2>
 800500a:	6823      	ldr	r3, [r4, #0]
 800500c:	442b      	add	r3, r5
 800500e:	6023      	str	r3, [r4, #0]
 8005010:	e00e      	b.n	8005030 <_malloc_r+0xa0>
 8005012:	6822      	ldr	r2, [r4, #0]
 8005014:	1b52      	subs	r2, r2, r5
 8005016:	d41e      	bmi.n	8005056 <_malloc_r+0xc6>
 8005018:	2a0b      	cmp	r2, #11
 800501a:	d916      	bls.n	800504a <_malloc_r+0xba>
 800501c:	1961      	adds	r1, r4, r5
 800501e:	42a3      	cmp	r3, r4
 8005020:	6025      	str	r5, [r4, #0]
 8005022:	bf18      	it	ne
 8005024:	6059      	strne	r1, [r3, #4]
 8005026:	6863      	ldr	r3, [r4, #4]
 8005028:	bf08      	it	eq
 800502a:	6031      	streq	r1, [r6, #0]
 800502c:	5162      	str	r2, [r4, r5]
 800502e:	604b      	str	r3, [r1, #4]
 8005030:	4638      	mov	r0, r7
 8005032:	f104 060b 	add.w	r6, r4, #11
 8005036:	f000 f835 	bl	80050a4 <__malloc_unlock>
 800503a:	f026 0607 	bic.w	r6, r6, #7
 800503e:	1d23      	adds	r3, r4, #4
 8005040:	1af2      	subs	r2, r6, r3
 8005042:	d0b6      	beq.n	8004fb2 <_malloc_r+0x22>
 8005044:	1b9b      	subs	r3, r3, r6
 8005046:	50a3      	str	r3, [r4, r2]
 8005048:	e7b3      	b.n	8004fb2 <_malloc_r+0x22>
 800504a:	6862      	ldr	r2, [r4, #4]
 800504c:	42a3      	cmp	r3, r4
 800504e:	bf0c      	ite	eq
 8005050:	6032      	streq	r2, [r6, #0]
 8005052:	605a      	strne	r2, [r3, #4]
 8005054:	e7ec      	b.n	8005030 <_malloc_r+0xa0>
 8005056:	4623      	mov	r3, r4
 8005058:	6864      	ldr	r4, [r4, #4]
 800505a:	e7b2      	b.n	8004fc2 <_malloc_r+0x32>
 800505c:	4634      	mov	r4, r6
 800505e:	6876      	ldr	r6, [r6, #4]
 8005060:	e7b9      	b.n	8004fd6 <_malloc_r+0x46>
 8005062:	230c      	movs	r3, #12
 8005064:	603b      	str	r3, [r7, #0]
 8005066:	4638      	mov	r0, r7
 8005068:	f000 f81c 	bl	80050a4 <__malloc_unlock>
 800506c:	e7a1      	b.n	8004fb2 <_malloc_r+0x22>
 800506e:	6025      	str	r5, [r4, #0]
 8005070:	e7de      	b.n	8005030 <_malloc_r+0xa0>
 8005072:	bf00      	nop
 8005074:	20000260 	.word	0x20000260

08005078 <_sbrk_r>:
 8005078:	b538      	push	{r3, r4, r5, lr}
 800507a:	4d06      	ldr	r5, [pc, #24]	; (8005094 <_sbrk_r+0x1c>)
 800507c:	2300      	movs	r3, #0
 800507e:	4604      	mov	r4, r0
 8005080:	4608      	mov	r0, r1
 8005082:	602b      	str	r3, [r5, #0]
 8005084:	f7fc f88a 	bl	800119c <_sbrk>
 8005088:	1c43      	adds	r3, r0, #1
 800508a:	d102      	bne.n	8005092 <_sbrk_r+0x1a>
 800508c:	682b      	ldr	r3, [r5, #0]
 800508e:	b103      	cbz	r3, 8005092 <_sbrk_r+0x1a>
 8005090:	6023      	str	r3, [r4, #0]
 8005092:	bd38      	pop	{r3, r4, r5, pc}
 8005094:	20000268 	.word	0x20000268

08005098 <__malloc_lock>:
 8005098:	4801      	ldr	r0, [pc, #4]	; (80050a0 <__malloc_lock+0x8>)
 800509a:	f000 b809 	b.w	80050b0 <__retarget_lock_acquire_recursive>
 800509e:	bf00      	nop
 80050a0:	2000026c 	.word	0x2000026c

080050a4 <__malloc_unlock>:
 80050a4:	4801      	ldr	r0, [pc, #4]	; (80050ac <__malloc_unlock+0x8>)
 80050a6:	f000 b804 	b.w	80050b2 <__retarget_lock_release_recursive>
 80050aa:	bf00      	nop
 80050ac:	2000026c 	.word	0x2000026c

080050b0 <__retarget_lock_acquire_recursive>:
 80050b0:	4770      	bx	lr

080050b2 <__retarget_lock_release_recursive>:
 80050b2:	4770      	bx	lr

080050b4 <_init>:
 80050b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b6:	bf00      	nop
 80050b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ba:	bc08      	pop	{r3}
 80050bc:	469e      	mov	lr, r3
 80050be:	4770      	bx	lr

080050c0 <_fini>:
 80050c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c2:	bf00      	nop
 80050c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050c6:	bc08      	pop	{r3}
 80050c8:	469e      	mov	lr, r3
 80050ca:	4770      	bx	lr
